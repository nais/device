// Code generated by mockery. DO NOT EDIT.

package runtimeconfig

import (
	context "context"

	auth "github.com/nais/device/pkg/device-agent/auth"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/nais/device/pkg/pb"
)

// MockRuntimeConfig is an autogenerated mock type for the RuntimeConfig type
type MockRuntimeConfig struct {
	mock.Mock
}

// APIServerGRPCAddress provides a mock function with given fields:
func (_m *MockRuntimeConfig) APIServerGRPCAddress() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// APIServerPeer provides a mock function with given fields:
func (_m *MockRuntimeConfig) APIServerPeer() *pb.Gateway {
	ret := _m.Called()

	var r0 *pb.Gateway
	if rf, ok := ret.Get(0).(func() *pb.Gateway); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Gateway)
		}
	}

	return r0
}

// BuildHelperConfiguration provides a mock function with given fields: peers
func (_m *MockRuntimeConfig) BuildHelperConfiguration(peers []*pb.Gateway) *pb.Configuration {
	ret := _m.Called(peers)

	var r0 *pb.Configuration
	if rf, ok := ret.Get(0).(func([]*pb.Gateway) *pb.Configuration); ok {
		r0 = rf(peers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Configuration)
		}
	}

	return r0
}

// EnsureEnrolled provides a mock function with given fields: _a0, _a1
func (_m *MockRuntimeConfig) EnsureEnrolled(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActiveTenant provides a mock function with given fields:
func (_m *MockRuntimeConfig) GetActiveTenant() *pb.Tenant {
	ret := _m.Called()

	var r0 *pb.Tenant
	if rf, ok := ret.Get(0).(func() *pb.Tenant); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Tenant)
		}
	}

	return r0
}

// GetTenantSession provides a mock function with given fields:
func (_m *MockRuntimeConfig) GetTenantSession() (*pb.Session, error) {
	ret := _m.Called()

	var r0 *pb.Session
	var r1 error
	if rf, ok := ret.Get(0).(func() (*pb.Session, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *pb.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Session)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetToken provides a mock function with given fields: _a0
func (_m *MockRuntimeConfig) GetToken(_a0 context.Context) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadEnrollConfig provides a mock function with given fields:
func (_m *MockRuntimeConfig) LoadEnrollConfig() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PopulateTenants provides a mock function with given fields: _a0
func (_m *MockRuntimeConfig) PopulateTenants(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetEnrollConfig provides a mock function with given fields:
func (_m *MockRuntimeConfig) ResetEnrollConfig() {
	_m.Called()
}

// SaveEnrollConfig provides a mock function with given fields:
func (_m *MockRuntimeConfig) SaveEnrollConfig() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetActiveTenant provides a mock function with given fields: _a0
func (_m *MockRuntimeConfig) SetActiveTenant(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTenantSession provides a mock function with given fields: _a0
func (_m *MockRuntimeConfig) SetTenantSession(_a0 *pb.Session) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pb.Session) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetToken provides a mock function with given fields: _a0
func (_m *MockRuntimeConfig) SetToken(_a0 *auth.Tokens) {
	_m.Called(_a0)
}

// Tenants provides a mock function with given fields:
func (_m *MockRuntimeConfig) Tenants() []*pb.Tenant {
	ret := _m.Called()

	var r0 []*pb.Tenant
	if rf, ok := ret.Get(0).(func() []*pb.Tenant); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Tenant)
		}
	}

	return r0
}

// NewMockRuntimeConfig creates a new instance of MockRuntimeConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRuntimeConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRuntimeConfig {
	mock := &MockRuntimeConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

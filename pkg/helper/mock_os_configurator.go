// Code generated by mockery v2.32.2. DO NOT EDIT.

package helper

import (
	context "context"

	pb "github.com/nais/device/pkg/pb"
	mock "github.com/stretchr/testify/mock"
)

// MockOSConfigurator is an autogenerated mock type for the OSConfigurator type
type MockOSConfigurator struct {
	mock.Mock
}

// Prerequisites provides a mock function with given fields:
func (_m *MockOSConfigurator) Prerequisites() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupInterface provides a mock function with given fields: ctx, cfg
func (_m *MockOSConfigurator) SetupInterface(ctx context.Context, cfg *pb.Configuration) error {
	ret := _m.Called(ctx, cfg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.Configuration) error); ok {
		r0 = rf(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupRoutes provides a mock function with given fields: ctx, gateways
func (_m *MockOSConfigurator) SetupRoutes(ctx context.Context, gateways []*pb.Gateway) error {
	ret := _m.Called(ctx, gateways)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*pb.Gateway) error); ok {
		r0 = rf(ctx, gateways)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SyncConf provides a mock function with given fields: ctx, cfg
func (_m *MockOSConfigurator) SyncConf(ctx context.Context, cfg *pb.Configuration) error {
	ret := _m.Called(ctx, cfg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.Configuration) error); ok {
		r0 = rf(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeardownInterface provides a mock function with given fields: ctx
func (_m *MockOSConfigurator) TeardownInterface(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockOSConfigurator creates a new instance of MockOSConfigurator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOSConfigurator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOSConfigurator {
	mock := &MockOSConfigurator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

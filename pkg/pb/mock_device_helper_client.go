// Code generated by mockery v2.32.2. DO NOT EDIT.

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockDeviceHelperClient is an autogenerated mock type for the DeviceHelperClient type
type MockDeviceHelperClient struct {
	mock.Mock
}

// Configure provides a mock function with given fields: ctx, in, opts
func (_m *MockDeviceHelperClient) Configure(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ConfigureResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Configuration, ...grpc.CallOption) (*ConfigureResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Configuration, ...grpc.CallOption) *ConfigureResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ConfigureResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Configuration, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSerial provides a mock function with given fields: ctx, in, opts
func (_m *MockDeviceHelperClient) GetSerial(ctx context.Context, in *GetSerialRequest, opts ...grpc.CallOption) (*GetSerialResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetSerialResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetSerialRequest, ...grpc.CallOption) (*GetSerialResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetSerialRequest, ...grpc.CallOption) *GetSerialResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetSerialResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetSerialRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Teardown provides a mock function with given fields: ctx, in, opts
func (_m *MockDeviceHelperClient) Teardown(ctx context.Context, in *TeardownRequest, opts ...grpc.CallOption) (*TeardownResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *TeardownResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *TeardownRequest, ...grpc.CallOption) (*TeardownResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *TeardownRequest, ...grpc.CallOption) *TeardownResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TeardownResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *TeardownRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upgrade provides a mock function with given fields: ctx, in, opts
func (_m *MockDeviceHelperClient) Upgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*UpgradeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *UpgradeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *UpgradeRequest, ...grpc.CallOption) (*UpgradeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *UpgradeRequest, ...grpc.CallOption) *UpgradeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpgradeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *UpgradeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockDeviceHelperClient creates a new instance of MockDeviceHelperClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeviceHelperClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeviceHelperClient {
	mock := &MockDeviceHelperClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

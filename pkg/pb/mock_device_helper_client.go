// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package pb

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockDeviceHelperClient creates a new instance of MockDeviceHelperClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeviceHelperClient(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockDeviceHelperClient {
	mock := &MockDeviceHelperClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDeviceHelperClient is an autogenerated mock type for the DeviceHelperClient type
type MockDeviceHelperClient struct {
	mock.Mock
}

type MockDeviceHelperClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeviceHelperClient) EXPECT() *MockDeviceHelperClient_Expecter {
	return &MockDeviceHelperClient_Expecter{mock: &_m.Mock}
}

// Configure provides a mock function for the type MockDeviceHelperClient
func (_mock *MockDeviceHelperClient) Configure(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Configure")
	}

	var r0 *ConfigureResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Configuration, ...grpc.CallOption) (*ConfigureResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Configuration, ...grpc.CallOption) *ConfigureResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ConfigureResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *Configuration, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDeviceHelperClient_Configure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Configure'
type MockDeviceHelperClient_Configure_Call struct {
	*mock.Call
}

// Configure is a helper method to define mock.On call
//   - ctx context.Context
//   - in *Configuration
//   - opts ...grpc.CallOption
func (_e *MockDeviceHelperClient_Expecter) Configure(ctx interface{}, in interface{}, opts ...interface{}) *MockDeviceHelperClient_Configure_Call {
	return &MockDeviceHelperClient_Configure_Call{Call: _e.mock.On("Configure",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDeviceHelperClient_Configure_Call) Run(run func(ctx context.Context, in *Configuration, opts ...grpc.CallOption)) *MockDeviceHelperClient_Configure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Configuration
		if args[1] != nil {
			arg1 = args[1].(*Configuration)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDeviceHelperClient_Configure_Call) Return(configureResponse *ConfigureResponse, err error) *MockDeviceHelperClient_Configure_Call {
	_c.Call.Return(configureResponse, err)
	return _c
}

func (_c *MockDeviceHelperClient_Configure_Call) RunAndReturn(run func(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*ConfigureResponse, error)) *MockDeviceHelperClient_Configure_Call {
	_c.Call.Return(run)
	return _c
}

// GetSerial provides a mock function for the type MockDeviceHelperClient
func (_mock *MockDeviceHelperClient) GetSerial(ctx context.Context, in *GetSerialRequest, opts ...grpc.CallOption) (*GetSerialResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSerial")
	}

	var r0 *GetSerialResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetSerialRequest, ...grpc.CallOption) (*GetSerialResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetSerialRequest, ...grpc.CallOption) *GetSerialResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetSerialResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetSerialRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDeviceHelperClient_GetSerial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSerial'
type MockDeviceHelperClient_GetSerial_Call struct {
	*mock.Call
}

// GetSerial is a helper method to define mock.On call
//   - ctx context.Context
//   - in *GetSerialRequest
//   - opts ...grpc.CallOption
func (_e *MockDeviceHelperClient_Expecter) GetSerial(ctx interface{}, in interface{}, opts ...interface{}) *MockDeviceHelperClient_GetSerial_Call {
	return &MockDeviceHelperClient_GetSerial_Call{Call: _e.mock.On("GetSerial",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDeviceHelperClient_GetSerial_Call) Run(run func(ctx context.Context, in *GetSerialRequest, opts ...grpc.CallOption)) *MockDeviceHelperClient_GetSerial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *GetSerialRequest
		if args[1] != nil {
			arg1 = args[1].(*GetSerialRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDeviceHelperClient_GetSerial_Call) Return(getSerialResponse *GetSerialResponse, err error) *MockDeviceHelperClient_GetSerial_Call {
	_c.Call.Return(getSerialResponse, err)
	return _c
}

func (_c *MockDeviceHelperClient_GetSerial_Call) RunAndReturn(run func(ctx context.Context, in *GetSerialRequest, opts ...grpc.CallOption) (*GetSerialResponse, error)) *MockDeviceHelperClient_GetSerial_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockDeviceHelperClient
func (_mock *MockDeviceHelperClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 *PingResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *PingRequest, ...grpc.CallOption) (*PingResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *PingRequest, ...grpc.CallOption) *PingResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PingResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *PingRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDeviceHelperClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockDeviceHelperClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
//   - in *PingRequest
//   - opts ...grpc.CallOption
func (_e *MockDeviceHelperClient_Expecter) Ping(ctx interface{}, in interface{}, opts ...interface{}) *MockDeviceHelperClient_Ping_Call {
	return &MockDeviceHelperClient_Ping_Call{Call: _e.mock.On("Ping",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDeviceHelperClient_Ping_Call) Run(run func(ctx context.Context, in *PingRequest, opts ...grpc.CallOption)) *MockDeviceHelperClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *PingRequest
		if args[1] != nil {
			arg1 = args[1].(*PingRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDeviceHelperClient_Ping_Call) Return(pingResponse *PingResponse, err error) *MockDeviceHelperClient_Ping_Call {
	_c.Call.Return(pingResponse, err)
	return _c
}

func (_c *MockDeviceHelperClient_Ping_Call) RunAndReturn(run func(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)) *MockDeviceHelperClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Teardown provides a mock function for the type MockDeviceHelperClient
func (_mock *MockDeviceHelperClient) Teardown(ctx context.Context, in *TeardownRequest, opts ...grpc.CallOption) (*TeardownResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Teardown")
	}

	var r0 *TeardownResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *TeardownRequest, ...grpc.CallOption) (*TeardownResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *TeardownRequest, ...grpc.CallOption) *TeardownResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TeardownResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *TeardownRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDeviceHelperClient_Teardown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Teardown'
type MockDeviceHelperClient_Teardown_Call struct {
	*mock.Call
}

// Teardown is a helper method to define mock.On call
//   - ctx context.Context
//   - in *TeardownRequest
//   - opts ...grpc.CallOption
func (_e *MockDeviceHelperClient_Expecter) Teardown(ctx interface{}, in interface{}, opts ...interface{}) *MockDeviceHelperClient_Teardown_Call {
	return &MockDeviceHelperClient_Teardown_Call{Call: _e.mock.On("Teardown",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDeviceHelperClient_Teardown_Call) Run(run func(ctx context.Context, in *TeardownRequest, opts ...grpc.CallOption)) *MockDeviceHelperClient_Teardown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *TeardownRequest
		if args[1] != nil {
			arg1 = args[1].(*TeardownRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDeviceHelperClient_Teardown_Call) Return(teardownResponse *TeardownResponse, err error) *MockDeviceHelperClient_Teardown_Call {
	_c.Call.Return(teardownResponse, err)
	return _c
}

func (_c *MockDeviceHelperClient_Teardown_Call) RunAndReturn(run func(ctx context.Context, in *TeardownRequest, opts ...grpc.CallOption) (*TeardownResponse, error)) *MockDeviceHelperClient_Teardown_Call {
	_c.Call.Return(run)
	return _c
}

// Upgrade provides a mock function for the type MockDeviceHelperClient
func (_mock *MockDeviceHelperClient) Upgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*UpgradeResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Upgrade")
	}

	var r0 *UpgradeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *UpgradeRequest, ...grpc.CallOption) (*UpgradeResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *UpgradeRequest, ...grpc.CallOption) *UpgradeResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpgradeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *UpgradeRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDeviceHelperClient_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type MockDeviceHelperClient_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - ctx context.Context
//   - in *UpgradeRequest
//   - opts ...grpc.CallOption
func (_e *MockDeviceHelperClient_Expecter) Upgrade(ctx interface{}, in interface{}, opts ...interface{}) *MockDeviceHelperClient_Upgrade_Call {
	return &MockDeviceHelperClient_Upgrade_Call{Call: _e.mock.On("Upgrade",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDeviceHelperClient_Upgrade_Call) Run(run func(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption)) *MockDeviceHelperClient_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *UpgradeRequest
		if args[1] != nil {
			arg1 = args[1].(*UpgradeRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDeviceHelperClient_Upgrade_Call) Return(upgradeResponse *UpgradeResponse, err error) *MockDeviceHelperClient_Upgrade_Call {
	_c.Call.Return(upgradeResponse, err)
	return _c
}

func (_c *MockDeviceHelperClient_Upgrade_Call) RunAndReturn(run func(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*UpgradeResponse, error)) *MockDeviceHelperClient_Upgrade_Call {
	_c.Call.Return(run)
	return _c
}

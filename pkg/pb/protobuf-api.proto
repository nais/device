syntax = "proto3";

option go_package = "github.com/nais/device/pkg/pb";

package naisdevice;

import "google/protobuf/timestamp.proto";

service DeviceHelper {
    // Push and apply new VPN configuration.
    rpc Configure (Configuration) returns (ConfigureResponse) {
    }

    // Delete VPN configuration and shut down connections.
    rpc Teardown (TeardownRequest) returns (TeardownResponse) {
    }

    // Install the newest version of naisdevice.
    rpc Upgrade (UpgradeRequest) returns (UpgradeResponse) {
    }
}

service DeviceAgent {
    // DeviceAgent will stream all state changes on this endpoint.
    // Use Status() to continuously monitor the current Agent status.
    rpc Status (AgentStatusRequest) returns (stream AgentStatus) {
    }

    // Open the JITA form in a web browser.
    rpc ConfigureJITA (ConfigureJITARequest) returns (ConfigureJITAResponse) {
    }

    // Log in to API server, enabling access to protected resources.
    rpc Login (LoginRequest) returns (LoginResponse) {
    }

    // Log out of API server, shutting down all VPN connections.
    rpc Logout (LogoutRequest) returns (LogoutResponse) {
    }

    // Start background renewal of client cert for NAV MS services
    rpc EnableClientCertRenewal (EnableCertRenewalRequest) returns (EnableCertRenewalResponse) {
    }
}

message TeardownRequest {

}

message TeardownResponse {

}

message ConfigureResponse {

}

message UpgradeResponse {

}

message ConfigureJITAResponse {

}

message LoginResponse {

}

message LogoutResponse {

}

message UpgradeRequest {

}

message ConfigureJITARequest {
    Gateway gateway = 1;
}

message LoginRequest {
}

message LogoutRequest {

}

message EnableCertRenewalRequest {
    bool enable = 1;
}

message EnableCertRenewalResponse {

}

enum AgentState {
    Disconnected = 0;
    Bootstrapping = 1;
    Connected = 2;
    Disconnecting = 3;
    Unhealthy = 4;
    Quitting = 5;
    Authenticating = 6;
    SyncConfig = 7;
    HealthCheck = 8;
    AuthenticateBackoff = 9;
    EnableClientCertRenewal = 10;
    DisableClientCertRenewal = 11;
}

message AgentStatusRequest {
    bool keepConnectionOnComplete = 1;
}

message AgentStatus {
    AgentState connectionState = 1;
    google.protobuf.Timestamp connectedSince = 2;
    bool newVersionAvailable = 3;
    repeated Gateway Gateways = 4;
}

message Configuration {
    string privateKey = 1;
    string deviceIP = 2;
    repeated Gateway Gateways = 3;
}

message Gateway {
    string name = 1;
    bool healthy = 2;
    string publicKey = 3;
    string endpoint = 4;
    string ip = 5;
    repeated string routes = 6;
    bool requiresPrivilegedAccess = 7 [json_name = "requires_privileged_access"];
    repeated string accessGroupIDs = 8;
}

message Error {
    string message = 1;
}

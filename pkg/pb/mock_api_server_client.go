// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package pb

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockAPIServerClient creates a new instance of MockAPIServerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAPIServerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAPIServerClient {
	mock := &MockAPIServerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAPIServerClient is an autogenerated mock type for the APIServerClient type
type MockAPIServerClient struct {
	mock.Mock
}

type MockAPIServerClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAPIServerClient) EXPECT() *MockAPIServerClient_Expecter {
	return &MockAPIServerClient_Expecter{mock: &_m.Mock}
}

// EnrollGateway provides a mock function for the type MockAPIServerClient
func (_mock *MockAPIServerClient) EnrollGateway(ctx context.Context, in *ModifyGatewayRequest, opts ...grpc.CallOption) (*ModifyGatewayResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnrollGateway")
	}

	var r0 *ModifyGatewayResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ModifyGatewayRequest, ...grpc.CallOption) (*ModifyGatewayResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ModifyGatewayRequest, ...grpc.CallOption) *ModifyGatewayResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ModifyGatewayResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ModifyGatewayRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIServerClient_EnrollGateway_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnrollGateway'
type MockAPIServerClient_EnrollGateway_Call struct {
	*mock.Call
}

// EnrollGateway is a helper method to define mock.On call
//   - ctx context.Context
//   - in *ModifyGatewayRequest
//   - opts ...grpc.CallOption
func (_e *MockAPIServerClient_Expecter) EnrollGateway(ctx interface{}, in interface{}, opts ...interface{}) *MockAPIServerClient_EnrollGateway_Call {
	return &MockAPIServerClient_EnrollGateway_Call{Call: _e.mock.On("EnrollGateway",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAPIServerClient_EnrollGateway_Call) Run(run func(ctx context.Context, in *ModifyGatewayRequest, opts ...grpc.CallOption)) *MockAPIServerClient_EnrollGateway_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ModifyGatewayRequest
		if args[1] != nil {
			arg1 = args[1].(*ModifyGatewayRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAPIServerClient_EnrollGateway_Call) Return(modifyGatewayResponse *ModifyGatewayResponse, err error) *MockAPIServerClient_EnrollGateway_Call {
	_c.Call.Return(modifyGatewayResponse, err)
	return _c
}

func (_c *MockAPIServerClient_EnrollGateway_Call) RunAndReturn(run func(ctx context.Context, in *ModifyGatewayRequest, opts ...grpc.CallOption) (*ModifyGatewayResponse, error)) *MockAPIServerClient_EnrollGateway_Call {
	_c.Call.Return(run)
	return _c
}

// GetAcceptableUseAcceptedAt provides a mock function for the type MockAPIServerClient
func (_mock *MockAPIServerClient) GetAcceptableUseAcceptedAt(ctx context.Context, in *GetAcceptableUseAcceptedAtRequest, opts ...grpc.CallOption) (*GetAcceptableUseAcceptedAtResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAcceptableUseAcceptedAt")
	}

	var r0 *GetAcceptableUseAcceptedAtResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetAcceptableUseAcceptedAtRequest, ...grpc.CallOption) (*GetAcceptableUseAcceptedAtResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetAcceptableUseAcceptedAtRequest, ...grpc.CallOption) *GetAcceptableUseAcceptedAtResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetAcceptableUseAcceptedAtResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetAcceptableUseAcceptedAtRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIServerClient_GetAcceptableUseAcceptedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAcceptableUseAcceptedAt'
type MockAPIServerClient_GetAcceptableUseAcceptedAt_Call struct {
	*mock.Call
}

// GetAcceptableUseAcceptedAt is a helper method to define mock.On call
//   - ctx context.Context
//   - in *GetAcceptableUseAcceptedAtRequest
//   - opts ...grpc.CallOption
func (_e *MockAPIServerClient_Expecter) GetAcceptableUseAcceptedAt(ctx interface{}, in interface{}, opts ...interface{}) *MockAPIServerClient_GetAcceptableUseAcceptedAt_Call {
	return &MockAPIServerClient_GetAcceptableUseAcceptedAt_Call{Call: _e.mock.On("GetAcceptableUseAcceptedAt",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAPIServerClient_GetAcceptableUseAcceptedAt_Call) Run(run func(ctx context.Context, in *GetAcceptableUseAcceptedAtRequest, opts ...grpc.CallOption)) *MockAPIServerClient_GetAcceptableUseAcceptedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *GetAcceptableUseAcceptedAtRequest
		if args[1] != nil {
			arg1 = args[1].(*GetAcceptableUseAcceptedAtRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAPIServerClient_GetAcceptableUseAcceptedAt_Call) Return(getAcceptableUseAcceptedAtResponse *GetAcceptableUseAcceptedAtResponse, err error) *MockAPIServerClient_GetAcceptableUseAcceptedAt_Call {
	_c.Call.Return(getAcceptableUseAcceptedAtResponse, err)
	return _c
}

func (_c *MockAPIServerClient_GetAcceptableUseAcceptedAt_Call) RunAndReturn(run func(ctx context.Context, in *GetAcceptableUseAcceptedAtRequest, opts ...grpc.CallOption) (*GetAcceptableUseAcceptedAtResponse, error)) *MockAPIServerClient_GetAcceptableUseAcceptedAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceConfiguration provides a mock function for the type MockAPIServerClient
func (_mock *MockAPIServerClient) GetDeviceConfiguration(ctx context.Context, in *GetDeviceConfigurationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDeviceConfigurationResponse], error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceConfiguration")
	}

	var r0 grpc.ServerStreamingClient[GetDeviceConfigurationResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetDeviceConfigurationRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[GetDeviceConfigurationResponse], error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetDeviceConfigurationRequest, ...grpc.CallOption) grpc.ServerStreamingClient[GetDeviceConfigurationResponse]); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[GetDeviceConfigurationResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetDeviceConfigurationRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIServerClient_GetDeviceConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceConfiguration'
type MockAPIServerClient_GetDeviceConfiguration_Call struct {
	*mock.Call
}

// GetDeviceConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - in *GetDeviceConfigurationRequest
//   - opts ...grpc.CallOption
func (_e *MockAPIServerClient_Expecter) GetDeviceConfiguration(ctx interface{}, in interface{}, opts ...interface{}) *MockAPIServerClient_GetDeviceConfiguration_Call {
	return &MockAPIServerClient_GetDeviceConfiguration_Call{Call: _e.mock.On("GetDeviceConfiguration",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAPIServerClient_GetDeviceConfiguration_Call) Run(run func(ctx context.Context, in *GetDeviceConfigurationRequest, opts ...grpc.CallOption)) *MockAPIServerClient_GetDeviceConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *GetDeviceConfigurationRequest
		if args[1] != nil {
			arg1 = args[1].(*GetDeviceConfigurationRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAPIServerClient_GetDeviceConfiguration_Call) Return(serverStreamingClient grpc.ServerStreamingClient[GetDeviceConfigurationResponse], err error) *MockAPIServerClient_GetDeviceConfiguration_Call {
	_c.Call.Return(serverStreamingClient, err)
	return _c
}

func (_c *MockAPIServerClient_GetDeviceConfiguration_Call) RunAndReturn(run func(ctx context.Context, in *GetDeviceConfigurationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDeviceConfigurationResponse], error)) *MockAPIServerClient_GetDeviceConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetGateway provides a mock function for the type MockAPIServerClient
func (_mock *MockAPIServerClient) GetGateway(ctx context.Context, in *ModifyGatewayRequest, opts ...grpc.CallOption) (*Gateway, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGateway")
	}

	var r0 *Gateway
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ModifyGatewayRequest, ...grpc.CallOption) (*Gateway, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ModifyGatewayRequest, ...grpc.CallOption) *Gateway); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Gateway)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ModifyGatewayRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIServerClient_GetGateway_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGateway'
type MockAPIServerClient_GetGateway_Call struct {
	*mock.Call
}

// GetGateway is a helper method to define mock.On call
//   - ctx context.Context
//   - in *ModifyGatewayRequest
//   - opts ...grpc.CallOption
func (_e *MockAPIServerClient_Expecter) GetGateway(ctx interface{}, in interface{}, opts ...interface{}) *MockAPIServerClient_GetGateway_Call {
	return &MockAPIServerClient_GetGateway_Call{Call: _e.mock.On("GetGateway",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAPIServerClient_GetGateway_Call) Run(run func(ctx context.Context, in *ModifyGatewayRequest, opts ...grpc.CallOption)) *MockAPIServerClient_GetGateway_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ModifyGatewayRequest
		if args[1] != nil {
			arg1 = args[1].(*ModifyGatewayRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAPIServerClient_GetGateway_Call) Return(gateway *Gateway, err error) *MockAPIServerClient_GetGateway_Call {
	_c.Call.Return(gateway, err)
	return _c
}

func (_c *MockAPIServerClient_GetGateway_Call) RunAndReturn(run func(ctx context.Context, in *ModifyGatewayRequest, opts ...grpc.CallOption) (*Gateway, error)) *MockAPIServerClient_GetGateway_Call {
	_c.Call.Return(run)
	return _c
}

// GetGatewayConfiguration provides a mock function for the type MockAPIServerClient
func (_mock *MockAPIServerClient) GetGatewayConfiguration(ctx context.Context, in *GetGatewayConfigurationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetGatewayConfigurationResponse], error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGatewayConfiguration")
	}

	var r0 grpc.ServerStreamingClient[GetGatewayConfigurationResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetGatewayConfigurationRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[GetGatewayConfigurationResponse], error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetGatewayConfigurationRequest, ...grpc.CallOption) grpc.ServerStreamingClient[GetGatewayConfigurationResponse]); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[GetGatewayConfigurationResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetGatewayConfigurationRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIServerClient_GetGatewayConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGatewayConfiguration'
type MockAPIServerClient_GetGatewayConfiguration_Call struct {
	*mock.Call
}

// GetGatewayConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - in *GetGatewayConfigurationRequest
//   - opts ...grpc.CallOption
func (_e *MockAPIServerClient_Expecter) GetGatewayConfiguration(ctx interface{}, in interface{}, opts ...interface{}) *MockAPIServerClient_GetGatewayConfiguration_Call {
	return &MockAPIServerClient_GetGatewayConfiguration_Call{Call: _e.mock.On("GetGatewayConfiguration",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAPIServerClient_GetGatewayConfiguration_Call) Run(run func(ctx context.Context, in *GetGatewayConfigurationRequest, opts ...grpc.CallOption)) *MockAPIServerClient_GetGatewayConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *GetGatewayConfigurationRequest
		if args[1] != nil {
			arg1 = args[1].(*GetGatewayConfigurationRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAPIServerClient_GetGatewayConfiguration_Call) Return(serverStreamingClient grpc.ServerStreamingClient[GetGatewayConfigurationResponse], err error) *MockAPIServerClient_GetGatewayConfiguration_Call {
	_c.Call.Return(serverStreamingClient, err)
	return _c
}

func (_c *MockAPIServerClient_GetGatewayConfiguration_Call) RunAndReturn(run func(ctx context.Context, in *GetGatewayConfigurationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetGatewayConfigurationResponse], error)) *MockAPIServerClient_GetGatewayConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetKolideCache provides a mock function for the type MockAPIServerClient
func (_mock *MockAPIServerClient) GetKolideCache(ctx context.Context, in *GetKolideCacheRequest, opts ...grpc.CallOption) (*GetKolideCacheResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetKolideCache")
	}

	var r0 *GetKolideCacheResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetKolideCacheRequest, ...grpc.CallOption) (*GetKolideCacheResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetKolideCacheRequest, ...grpc.CallOption) *GetKolideCacheResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetKolideCacheResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetKolideCacheRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIServerClient_GetKolideCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKolideCache'
type MockAPIServerClient_GetKolideCache_Call struct {
	*mock.Call
}

// GetKolideCache is a helper method to define mock.On call
//   - ctx context.Context
//   - in *GetKolideCacheRequest
//   - opts ...grpc.CallOption
func (_e *MockAPIServerClient_Expecter) GetKolideCache(ctx interface{}, in interface{}, opts ...interface{}) *MockAPIServerClient_GetKolideCache_Call {
	return &MockAPIServerClient_GetKolideCache_Call{Call: _e.mock.On("GetKolideCache",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAPIServerClient_GetKolideCache_Call) Run(run func(ctx context.Context, in *GetKolideCacheRequest, opts ...grpc.CallOption)) *MockAPIServerClient_GetKolideCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *GetKolideCacheRequest
		if args[1] != nil {
			arg1 = args[1].(*GetKolideCacheRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAPIServerClient_GetKolideCache_Call) Return(getKolideCacheResponse *GetKolideCacheResponse, err error) *MockAPIServerClient_GetKolideCache_Call {
	_c.Call.Return(getKolideCacheResponse, err)
	return _c
}

func (_c *MockAPIServerClient_GetKolideCache_Call) RunAndReturn(run func(ctx context.Context, in *GetKolideCacheRequest, opts ...grpc.CallOption) (*GetKolideCacheResponse, error)) *MockAPIServerClient_GetKolideCache_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessions provides a mock function for the type MockAPIServerClient
func (_mock *MockAPIServerClient) GetSessions(ctx context.Context, in *GetSessionsRequest, opts ...grpc.CallOption) (*GetSessionsResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSessions")
	}

	var r0 *GetSessionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetSessionsRequest, ...grpc.CallOption) (*GetSessionsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetSessionsRequest, ...grpc.CallOption) *GetSessionsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetSessionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetSessionsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIServerClient_GetSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessions'
type MockAPIServerClient_GetSessions_Call struct {
	*mock.Call
}

// GetSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - in *GetSessionsRequest
//   - opts ...grpc.CallOption
func (_e *MockAPIServerClient_Expecter) GetSessions(ctx interface{}, in interface{}, opts ...interface{}) *MockAPIServerClient_GetSessions_Call {
	return &MockAPIServerClient_GetSessions_Call{Call: _e.mock.On("GetSessions",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAPIServerClient_GetSessions_Call) Run(run func(ctx context.Context, in *GetSessionsRequest, opts ...grpc.CallOption)) *MockAPIServerClient_GetSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *GetSessionsRequest
		if args[1] != nil {
			arg1 = args[1].(*GetSessionsRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAPIServerClient_GetSessions_Call) Return(getSessionsResponse *GetSessionsResponse, err error) *MockAPIServerClient_GetSessions_Call {
	_c.Call.Return(getSessionsResponse, err)
	return _c
}

func (_c *MockAPIServerClient_GetSessions_Call) RunAndReturn(run func(ctx context.Context, in *GetSessionsRequest, opts ...grpc.CallOption) (*GetSessionsResponse, error)) *MockAPIServerClient_GetSessions_Call {
	_c.Call.Return(run)
	return _c
}

// ListGateways provides a mock function for the type MockAPIServerClient
func (_mock *MockAPIServerClient) ListGateways(ctx context.Context, in *ListGatewayRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Gateway], error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGateways")
	}

	var r0 grpc.ServerStreamingClient[Gateway]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ListGatewayRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[Gateway], error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ListGatewayRequest, ...grpc.CallOption) grpc.ServerStreamingClient[Gateway]); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[Gateway])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ListGatewayRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIServerClient_ListGateways_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGateways'
type MockAPIServerClient_ListGateways_Call struct {
	*mock.Call
}

// ListGateways is a helper method to define mock.On call
//   - ctx context.Context
//   - in *ListGatewayRequest
//   - opts ...grpc.CallOption
func (_e *MockAPIServerClient_Expecter) ListGateways(ctx interface{}, in interface{}, opts ...interface{}) *MockAPIServerClient_ListGateways_Call {
	return &MockAPIServerClient_ListGateways_Call{Call: _e.mock.On("ListGateways",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAPIServerClient_ListGateways_Call) Run(run func(ctx context.Context, in *ListGatewayRequest, opts ...grpc.CallOption)) *MockAPIServerClient_ListGateways_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ListGatewayRequest
		if args[1] != nil {
			arg1 = args[1].(*ListGatewayRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAPIServerClient_ListGateways_Call) Return(serverStreamingClient grpc.ServerStreamingClient[Gateway], err error) *MockAPIServerClient_ListGateways_Call {
	_c.Call.Return(serverStreamingClient, err)
	return _c
}

func (_c *MockAPIServerClient_ListGateways_Call) RunAndReturn(run func(ctx context.Context, in *ListGatewayRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Gateway], error)) *MockAPIServerClient_ListGateways_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type MockAPIServerClient
func (_mock *MockAPIServerClient) Login(ctx context.Context, in *APIServerLoginRequest, opts ...grpc.CallOption) (*APIServerLoginResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *APIServerLoginResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *APIServerLoginRequest, ...grpc.CallOption) (*APIServerLoginResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *APIServerLoginRequest, ...grpc.CallOption) *APIServerLoginResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*APIServerLoginResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *APIServerLoginRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIServerClient_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAPIServerClient_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - in *APIServerLoginRequest
//   - opts ...grpc.CallOption
func (_e *MockAPIServerClient_Expecter) Login(ctx interface{}, in interface{}, opts ...interface{}) *MockAPIServerClient_Login_Call {
	return &MockAPIServerClient_Login_Call{Call: _e.mock.On("Login",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAPIServerClient_Login_Call) Run(run func(ctx context.Context, in *APIServerLoginRequest, opts ...grpc.CallOption)) *MockAPIServerClient_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *APIServerLoginRequest
		if args[1] != nil {
			arg1 = args[1].(*APIServerLoginRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAPIServerClient_Login_Call) Return(aPIServerLoginResponse *APIServerLoginResponse, err error) *MockAPIServerClient_Login_Call {
	_c.Call.Return(aPIServerLoginResponse, err)
	return _c
}

func (_c *MockAPIServerClient_Login_Call) RunAndReturn(run func(ctx context.Context, in *APIServerLoginRequest, opts ...grpc.CallOption) (*APIServerLoginResponse, error)) *MockAPIServerClient_Login_Call {
	_c.Call.Return(run)
	return _c
}

// SetAcceptableUseAccepted provides a mock function for the type MockAPIServerClient
func (_mock *MockAPIServerClient) SetAcceptableUseAccepted(ctx context.Context, in *SetAcceptableUseAcceptedRequest, opts ...grpc.CallOption) (*SetAcceptableUseAcceptedResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetAcceptableUseAccepted")
	}

	var r0 *SetAcceptableUseAcceptedResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SetAcceptableUseAcceptedRequest, ...grpc.CallOption) (*SetAcceptableUseAcceptedResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SetAcceptableUseAcceptedRequest, ...grpc.CallOption) *SetAcceptableUseAcceptedResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SetAcceptableUseAcceptedResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *SetAcceptableUseAcceptedRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIServerClient_SetAcceptableUseAccepted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAcceptableUseAccepted'
type MockAPIServerClient_SetAcceptableUseAccepted_Call struct {
	*mock.Call
}

// SetAcceptableUseAccepted is a helper method to define mock.On call
//   - ctx context.Context
//   - in *SetAcceptableUseAcceptedRequest
//   - opts ...grpc.CallOption
func (_e *MockAPIServerClient_Expecter) SetAcceptableUseAccepted(ctx interface{}, in interface{}, opts ...interface{}) *MockAPIServerClient_SetAcceptableUseAccepted_Call {
	return &MockAPIServerClient_SetAcceptableUseAccepted_Call{Call: _e.mock.On("SetAcceptableUseAccepted",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAPIServerClient_SetAcceptableUseAccepted_Call) Run(run func(ctx context.Context, in *SetAcceptableUseAcceptedRequest, opts ...grpc.CallOption)) *MockAPIServerClient_SetAcceptableUseAccepted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *SetAcceptableUseAcceptedRequest
		if args[1] != nil {
			arg1 = args[1].(*SetAcceptableUseAcceptedRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAPIServerClient_SetAcceptableUseAccepted_Call) Return(setAcceptableUseAcceptedResponse *SetAcceptableUseAcceptedResponse, err error) *MockAPIServerClient_SetAcceptableUseAccepted_Call {
	_c.Call.Return(setAcceptableUseAcceptedResponse, err)
	return _c
}

func (_c *MockAPIServerClient_SetAcceptableUseAccepted_Call) RunAndReturn(run func(ctx context.Context, in *SetAcceptableUseAcceptedRequest, opts ...grpc.CallOption) (*SetAcceptableUseAcceptedResponse, error)) *MockAPIServerClient_SetAcceptableUseAccepted_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGateway provides a mock function for the type MockAPIServerClient
func (_mock *MockAPIServerClient) UpdateGateway(ctx context.Context, in *ModifyGatewayRequest, opts ...grpc.CallOption) (*ModifyGatewayResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGateway")
	}

	var r0 *ModifyGatewayResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ModifyGatewayRequest, ...grpc.CallOption) (*ModifyGatewayResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ModifyGatewayRequest, ...grpc.CallOption) *ModifyGatewayResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ModifyGatewayResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ModifyGatewayRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIServerClient_UpdateGateway_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGateway'
type MockAPIServerClient_UpdateGateway_Call struct {
	*mock.Call
}

// UpdateGateway is a helper method to define mock.On call
//   - ctx context.Context
//   - in *ModifyGatewayRequest
//   - opts ...grpc.CallOption
func (_e *MockAPIServerClient_Expecter) UpdateGateway(ctx interface{}, in interface{}, opts ...interface{}) *MockAPIServerClient_UpdateGateway_Call {
	return &MockAPIServerClient_UpdateGateway_Call{Call: _e.mock.On("UpdateGateway",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAPIServerClient_UpdateGateway_Call) Run(run func(ctx context.Context, in *ModifyGatewayRequest, opts ...grpc.CallOption)) *MockAPIServerClient_UpdateGateway_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ModifyGatewayRequest
		if args[1] != nil {
			arg1 = args[1].(*ModifyGatewayRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAPIServerClient_UpdateGateway_Call) Return(modifyGatewayResponse *ModifyGatewayResponse, err error) *MockAPIServerClient_UpdateGateway_Call {
	_c.Call.Return(modifyGatewayResponse, err)
	return _c
}

func (_c *MockAPIServerClient_UpdateGateway_Call) RunAndReturn(run func(ctx context.Context, in *ModifyGatewayRequest, opts ...grpc.CallOption) (*ModifyGatewayResponse, error)) *MockAPIServerClient_UpdateGateway_Call {
	_c.Call.Return(run)
	return _c
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addDeviceStmt, err = db.PrepareContext(ctx, addDevice); err != nil {
		return nil, fmt.Errorf("error preparing query AddDevice: %w", err)
	}
	if q.addGatewayStmt, err = db.PrepareContext(ctx, addGateway); err != nil {
		return nil, fmt.Errorf("error preparing query AddGateway: %w", err)
	}
	if q.addGatewayAccessGroupIDStmt, err = db.PrepareContext(ctx, addGatewayAccessGroupID); err != nil {
		return nil, fmt.Errorf("error preparing query AddGatewayAccessGroupID: %w", err)
	}
	if q.addGatewayRouteStmt, err = db.PrepareContext(ctx, addGatewayRoute); err != nil {
		return nil, fmt.Errorf("error preparing query AddGatewayRoute: %w", err)
	}
	if q.addSessionStmt, err = db.PrepareContext(ctx, addSession); err != nil {
		return nil, fmt.Errorf("error preparing query AddSession: %w", err)
	}
	if q.addSessionAccessGroupIDStmt, err = db.PrepareContext(ctx, addSessionAccessGroupID); err != nil {
		return nil, fmt.Errorf("error preparing query AddSessionAccessGroupID: %w", err)
	}
	if q.deleteGatewayAccessGroupIDsStmt, err = db.PrepareContext(ctx, deleteGatewayAccessGroupIDs); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGatewayAccessGroupIDs: %w", err)
	}
	if q.deleteGatewayRoutesStmt, err = db.PrepareContext(ctx, deleteGatewayRoutes); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGatewayRoutes: %w", err)
	}
	if q.getDeviceByIDStmt, err = db.PrepareContext(ctx, getDeviceByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetDeviceByID: %w", err)
	}
	if q.getDeviceByPublicKeyStmt, err = db.PrepareContext(ctx, getDeviceByPublicKey); err != nil {
		return nil, fmt.Errorf("error preparing query GetDeviceByPublicKey: %w", err)
	}
	if q.getDeviceBySerialAndPlatformStmt, err = db.PrepareContext(ctx, getDeviceBySerialAndPlatform); err != nil {
		return nil, fmt.Errorf("error preparing query GetDeviceBySerialAndPlatform: %w", err)
	}
	if q.getDevicesStmt, err = db.PrepareContext(ctx, getDevices); err != nil {
		return nil, fmt.Errorf("error preparing query GetDevices: %w", err)
	}
	if q.getGatewayAccessGroupIDsStmt, err = db.PrepareContext(ctx, getGatewayAccessGroupIDs); err != nil {
		return nil, fmt.Errorf("error preparing query GetGatewayAccessGroupIDs: %w", err)
	}
	if q.getGatewayByNameStmt, err = db.PrepareContext(ctx, getGatewayByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetGatewayByName: %w", err)
	}
	if q.getGatewayRoutesStmt, err = db.PrepareContext(ctx, getGatewayRoutes); err != nil {
		return nil, fmt.Errorf("error preparing query GetGatewayRoutes: %w", err)
	}
	if q.getGatewaysStmt, err = db.PrepareContext(ctx, getGateways); err != nil {
		return nil, fmt.Errorf("error preparing query GetGateways: %w", err)
	}
	if q.getLastUsedIPV6Stmt, err = db.PrepareContext(ctx, getLastUsedIPV6); err != nil {
		return nil, fmt.Errorf("error preparing query GetLastUsedIPV6: %w", err)
	}
	if q.getMostRecentDeviceSessionStmt, err = db.PrepareContext(ctx, getMostRecentDeviceSession); err != nil {
		return nil, fmt.Errorf("error preparing query GetMostRecentDeviceSession: %w", err)
	}
	if q.getSessionByKeyStmt, err = db.PrepareContext(ctx, getSessionByKey); err != nil {
		return nil, fmt.Errorf("error preparing query GetSessionByKey: %w", err)
	}
	if q.getSessionGroupIDsStmt, err = db.PrepareContext(ctx, getSessionGroupIDs); err != nil {
		return nil, fmt.Errorf("error preparing query GetSessionGroupIDs: %w", err)
	}
	if q.getSessionsStmt, err = db.PrepareContext(ctx, getSessions); err != nil {
		return nil, fmt.Errorf("error preparing query GetSessions: %w", err)
	}
	if q.updateDeviceStmt, err = db.PrepareContext(ctx, updateDevice); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateDevice: %w", err)
	}
	if q.updateGatewayStmt, err = db.PrepareContext(ctx, updateGateway); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGateway: %w", err)
	}
	if q.updateGatewayDynamicFieldsStmt, err = db.PrepareContext(ctx, updateGatewayDynamicFields); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGatewayDynamicFields: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addDeviceStmt != nil {
		if cerr := q.addDeviceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addDeviceStmt: %w", cerr)
		}
	}
	if q.addGatewayStmt != nil {
		if cerr := q.addGatewayStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addGatewayStmt: %w", cerr)
		}
	}
	if q.addGatewayAccessGroupIDStmt != nil {
		if cerr := q.addGatewayAccessGroupIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addGatewayAccessGroupIDStmt: %w", cerr)
		}
	}
	if q.addGatewayRouteStmt != nil {
		if cerr := q.addGatewayRouteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addGatewayRouteStmt: %w", cerr)
		}
	}
	if q.addSessionStmt != nil {
		if cerr := q.addSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addSessionStmt: %w", cerr)
		}
	}
	if q.addSessionAccessGroupIDStmt != nil {
		if cerr := q.addSessionAccessGroupIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addSessionAccessGroupIDStmt: %w", cerr)
		}
	}
	if q.deleteGatewayAccessGroupIDsStmt != nil {
		if cerr := q.deleteGatewayAccessGroupIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGatewayAccessGroupIDsStmt: %w", cerr)
		}
	}
	if q.deleteGatewayRoutesStmt != nil {
		if cerr := q.deleteGatewayRoutesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGatewayRoutesStmt: %w", cerr)
		}
	}
	if q.getDeviceByIDStmt != nil {
		if cerr := q.getDeviceByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDeviceByIDStmt: %w", cerr)
		}
	}
	if q.getDeviceByPublicKeyStmt != nil {
		if cerr := q.getDeviceByPublicKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDeviceByPublicKeyStmt: %w", cerr)
		}
	}
	if q.getDeviceBySerialAndPlatformStmt != nil {
		if cerr := q.getDeviceBySerialAndPlatformStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDeviceBySerialAndPlatformStmt: %w", cerr)
		}
	}
	if q.getDevicesStmt != nil {
		if cerr := q.getDevicesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDevicesStmt: %w", cerr)
		}
	}
	if q.getGatewayAccessGroupIDsStmt != nil {
		if cerr := q.getGatewayAccessGroupIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGatewayAccessGroupIDsStmt: %w", cerr)
		}
	}
	if q.getGatewayByNameStmt != nil {
		if cerr := q.getGatewayByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGatewayByNameStmt: %w", cerr)
		}
	}
	if q.getGatewayRoutesStmt != nil {
		if cerr := q.getGatewayRoutesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGatewayRoutesStmt: %w", cerr)
		}
	}
	if q.getGatewaysStmt != nil {
		if cerr := q.getGatewaysStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGatewaysStmt: %w", cerr)
		}
	}
	if q.getLastUsedIPV6Stmt != nil {
		if cerr := q.getLastUsedIPV6Stmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLastUsedIPV6Stmt: %w", cerr)
		}
	}
	if q.getMostRecentDeviceSessionStmt != nil {
		if cerr := q.getMostRecentDeviceSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMostRecentDeviceSessionStmt: %w", cerr)
		}
	}
	if q.getSessionByKeyStmt != nil {
		if cerr := q.getSessionByKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionByKeyStmt: %w", cerr)
		}
	}
	if q.getSessionGroupIDsStmt != nil {
		if cerr := q.getSessionGroupIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionGroupIDsStmt: %w", cerr)
		}
	}
	if q.getSessionsStmt != nil {
		if cerr := q.getSessionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionsStmt: %w", cerr)
		}
	}
	if q.updateDeviceStmt != nil {
		if cerr := q.updateDeviceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateDeviceStmt: %w", cerr)
		}
	}
	if q.updateGatewayStmt != nil {
		if cerr := q.updateGatewayStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGatewayStmt: %w", cerr)
		}
	}
	if q.updateGatewayDynamicFieldsStmt != nil {
		if cerr := q.updateGatewayDynamicFieldsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGatewayDynamicFieldsStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                               DBTX
	tx                               *sql.Tx
	addDeviceStmt                    *sql.Stmt
	addGatewayStmt                   *sql.Stmt
	addGatewayAccessGroupIDStmt      *sql.Stmt
	addGatewayRouteStmt              *sql.Stmt
	addSessionStmt                   *sql.Stmt
	addSessionAccessGroupIDStmt      *sql.Stmt
	deleteGatewayAccessGroupIDsStmt  *sql.Stmt
	deleteGatewayRoutesStmt          *sql.Stmt
	getDeviceByIDStmt                *sql.Stmt
	getDeviceByPublicKeyStmt         *sql.Stmt
	getDeviceBySerialAndPlatformStmt *sql.Stmt
	getDevicesStmt                   *sql.Stmt
	getGatewayAccessGroupIDsStmt     *sql.Stmt
	getGatewayByNameStmt             *sql.Stmt
	getGatewayRoutesStmt             *sql.Stmt
	getGatewaysStmt                  *sql.Stmt
	getLastUsedIPV6Stmt              *sql.Stmt
	getMostRecentDeviceSessionStmt   *sql.Stmt
	getSessionByKeyStmt              *sql.Stmt
	getSessionGroupIDsStmt           *sql.Stmt
	getSessionsStmt                  *sql.Stmt
	updateDeviceStmt                 *sql.Stmt
	updateGatewayStmt                *sql.Stmt
	updateGatewayDynamicFieldsStmt   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                               tx,
		tx:                               tx,
		addDeviceStmt:                    q.addDeviceStmt,
		addGatewayStmt:                   q.addGatewayStmt,
		addGatewayAccessGroupIDStmt:      q.addGatewayAccessGroupIDStmt,
		addGatewayRouteStmt:              q.addGatewayRouteStmt,
		addSessionStmt:                   q.addSessionStmt,
		addSessionAccessGroupIDStmt:      q.addSessionAccessGroupIDStmt,
		deleteGatewayAccessGroupIDsStmt:  q.deleteGatewayAccessGroupIDsStmt,
		deleteGatewayRoutesStmt:          q.deleteGatewayRoutesStmt,
		getDeviceByIDStmt:                q.getDeviceByIDStmt,
		getDeviceByPublicKeyStmt:         q.getDeviceByPublicKeyStmt,
		getDeviceBySerialAndPlatformStmt: q.getDeviceBySerialAndPlatformStmt,
		getDevicesStmt:                   q.getDevicesStmt,
		getGatewayAccessGroupIDsStmt:     q.getGatewayAccessGroupIDsStmt,
		getGatewayByNameStmt:             q.getGatewayByNameStmt,
		getGatewayRoutesStmt:             q.getGatewayRoutesStmt,
		getGatewaysStmt:                  q.getGatewaysStmt,
		getLastUsedIPV6Stmt:              q.getLastUsedIPV6Stmt,
		getMostRecentDeviceSessionStmt:   q.getMostRecentDeviceSessionStmt,
		getSessionByKeyStmt:              q.getSessionByKeyStmt,
		getSessionGroupIDsStmt:           q.getSessionGroupIDsStmt,
		getSessionsStmt:                  q.getSessionsStmt,
		updateDeviceStmt:                 q.updateDeviceStmt,
		updateGatewayStmt:                q.updateGatewayStmt,
		updateGatewayDynamicFieldsStmt:   q.updateGatewayDynamicFieldsStmt,
	}
}

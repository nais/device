// Code generated by mockery v2.30.1. DO NOT EDIT.

package sqlc

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

// AddDevice provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) AddDevice(ctx context.Context, arg AddDeviceParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, AddDeviceParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddGateway provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) AddGateway(ctx context.Context, arg AddGatewayParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, AddGatewayParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddSession provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) AddSession(ctx context.Context, arg AddSessionParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, AddSessionParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeviceByID provides a mock function with given fields: ctx, id
func (_m *MockQuerier) GetDeviceByID(ctx context.Context, id int32) (*Device, error) {
	ret := _m.Called(ctx, id)

	var r0 *Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*Device, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *Device); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceByPublicKey provides a mock function with given fields: ctx, publicKey
func (_m *MockQuerier) GetDeviceByPublicKey(ctx context.Context, publicKey string) (*Device, error) {
	ret := _m.Called(ctx, publicKey)

	var r0 *Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Device, error)); ok {
		return rf(ctx, publicKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Device); ok {
		r0 = rf(ctx, publicKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, publicKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceBySerialAndPlatform provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetDeviceBySerialAndPlatform(ctx context.Context, arg GetDeviceBySerialAndPlatformParams) (*Device, error) {
	ret := _m.Called(ctx, arg)

	var r0 *Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetDeviceBySerialAndPlatformParams) (*Device, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetDeviceBySerialAndPlatformParams) *Device); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetDeviceBySerialAndPlatformParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevices provides a mock function with given fields: ctx
func (_m *MockQuerier) GetDevices(ctx context.Context) ([]*Device, error) {
	ret := _m.Called(ctx)

	var r0 []*Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*Device, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*Device); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGatewayByName provides a mock function with given fields: ctx, name
func (_m *MockQuerier) GetGatewayByName(ctx context.Context, name string) (*Gateway, error) {
	ret := _m.Called(ctx, name)

	var r0 *Gateway
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Gateway, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Gateway); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Gateway)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGateways provides a mock function with given fields: ctx
func (_m *MockQuerier) GetGateways(ctx context.Context) ([]*Gateway, error) {
	ret := _m.Called(ctx)

	var r0 []*Gateway
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*Gateway, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*Gateway); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Gateway)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMostRecentDeviceSession provides a mock function with given fields: ctx, deviceID
func (_m *MockQuerier) GetMostRecentDeviceSession(ctx context.Context, deviceID int32) (*GetMostRecentDeviceSessionRow, error) {
	ret := _m.Called(ctx, deviceID)

	var r0 *GetMostRecentDeviceSessionRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*GetMostRecentDeviceSessionRow, error)); ok {
		return rf(ctx, deviceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *GetMostRecentDeviceSessionRow); ok {
		r0 = rf(ctx, deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetMostRecentDeviceSessionRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionByKey provides a mock function with given fields: ctx, key
func (_m *MockQuerier) GetSessionByKey(ctx context.Context, key *string) (*GetSessionByKeyRow, error) {
	ret := _m.Called(ctx, key)

	var r0 *GetSessionByKeyRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) (*GetSessionByKeyRow, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) *GetSessionByKeyRow); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetSessionByKeyRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessions provides a mock function with given fields: ctx
func (_m *MockQuerier) GetSessions(ctx context.Context) ([]*GetSessionsRow, error) {
	ret := _m.Called(ctx)

	var r0 []*GetSessionsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*GetSessionsRow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*GetSessionsRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*GetSessionsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDevice provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UpdateDeviceParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGateway provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateGateway(ctx context.Context, arg UpdateGatewayParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UpdateGatewayParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGatewayDynamicFields provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateGatewayDynamicFields(ctx context.Context, arg UpdateGatewayDynamicFieldsParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UpdateGatewayDynamicFieldsParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

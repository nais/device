// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: gateways.sql

package sqlc

import (
	"context"
)

const addGateway = `-- name: AddGateway :exec
INSERT INTO gateways (name, endpoint, public_key, ip, password_hash, access_group_ids, routes, requires_privileged_access)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT (name) DO UPDATE SET endpoint = excluded.endpoint, public_key = excluded.public_key, password_hash = excluded.password_hash
`

type AddGatewayParams struct {
	Name                     string
	Endpoint                 string
	PublicKey                string
	Ip                       string
	PasswordHash             string
	AccessGroupIds           string
	Routes                   string
	RequiresPrivilegedAccess bool
}

func (q *Queries) AddGateway(ctx context.Context, arg AddGatewayParams) error {
	_, err := q.db.Exec(ctx, addGateway,
		arg.Name,
		arg.Endpoint,
		arg.PublicKey,
		arg.Ip,
		arg.PasswordHash,
		arg.AccessGroupIds,
		arg.Routes,
		arg.RequiresPrivilegedAccess,
	)
	return err
}

const getGatewayByName = `-- name: GetGatewayByName :one
SELECT id, name, access_group_ids, endpoint, public_key, ip, routes, requires_privileged_access, password_hash FROM gateways WHERE name = $1
`

func (q *Queries) GetGatewayByName(ctx context.Context, name string) (*Gateway, error) {
	row := q.db.QueryRow(ctx, getGatewayByName, name)
	var i Gateway
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccessGroupIds,
		&i.Endpoint,
		&i.PublicKey,
		&i.Ip,
		&i.Routes,
		&i.RequiresPrivilegedAccess,
		&i.PasswordHash,
	)
	return &i, err
}

const getGateways = `-- name: GetGateways :many
SELECT id, name, access_group_ids, endpoint, public_key, ip, routes, requires_privileged_access, password_hash FROM gateways
`

func (q *Queries) GetGateways(ctx context.Context) ([]*Gateway, error) {
	rows, err := q.db.Query(ctx, getGateways)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Gateway
	for rows.Next() {
		var i Gateway
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AccessGroupIds,
			&i.Endpoint,
			&i.PublicKey,
			&i.Ip,
			&i.Routes,
			&i.RequiresPrivilegedAccess,
			&i.PasswordHash,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGateway = `-- name: UpdateGateway :exec
UPDATE gateways
SET public_key = $1, access_group_ids = $2, endpoint = $3, ip = $4, routes = $5, requires_privileged_access = $6, password_hash = $7
WHERE name = $8
`

type UpdateGatewayParams struct {
	PublicKey                string
	AccessGroupIds           string
	Endpoint                 string
	Ip                       string
	Routes                   string
	RequiresPrivilegedAccess bool
	PasswordHash             string
	Name                     string
}

func (q *Queries) UpdateGateway(ctx context.Context, arg UpdateGatewayParams) error {
	_, err := q.db.Exec(ctx, updateGateway,
		arg.PublicKey,
		arg.AccessGroupIds,
		arg.Endpoint,
		arg.Ip,
		arg.Routes,
		arg.RequiresPrivilegedAccess,
		arg.PasswordHash,
		arg.Name,
	)
	return err
}

const updateGatewayDynamicFields = `-- name: UpdateGatewayDynamicFields :exec
UPDATE gateways
SET access_group_ids = $1, routes = $2, requires_privileged_access = $3
WHERE name = $4
`

type UpdateGatewayDynamicFieldsParams struct {
	AccessGroupIds           string
	Routes                   string
	RequiresPrivilegedAccess bool
	Name                     string
}

func (q *Queries) UpdateGatewayDynamicFields(ctx context.Context, arg UpdateGatewayDynamicFieldsParams) error {
	_, err := q.db.Exec(ctx, updateGatewayDynamicFields,
		arg.AccessGroupIds,
		arg.Routes,
		arg.RequiresPrivilegedAccess,
		arg.Name,
	)
	return err
}

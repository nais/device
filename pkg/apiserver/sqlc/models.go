// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package sqlc

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type Platform string

const (
	PlatformDarwin  Platform = "darwin"
	PlatformLinux   Platform = "linux"
	PlatformWindows Platform = "windows"
)

func (e *Platform) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Platform(s)
	case string:
		*e = Platform(s)
	default:
		return fmt.Errorf("unsupported scan type for Platform: %T", src)
	}
	return nil
}

type NullPlatform struct {
	Platform Platform
	Valid    bool // Valid is true if Platform is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPlatform) Scan(value interface{}) error {
	if value == nil {
		ns.Platform, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Platform.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPlatform) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Platform), nil
}

func (e Platform) Valid() bool {
	switch e {
	case PlatformDarwin,
		PlatformLinux,
		PlatformWindows:
		return true
	}
	return false
}

func AllPlatformValues() []Platform {
	return []Platform{
		PlatformDarwin,
		PlatformLinux,
		PlatformWindows,
	}
}

type Device struct {
	ID          int32
	Username    string
	Serial      string
	Platform    Platform
	Healthy     bool
	LastUpdated *time.Time
	PublicKey   string
	Ip          string
}

type Gateway struct {
	Name                     string
	Endpoint                 string
	PublicKey                string
	Ip                       string
	RequiresPrivilegedAccess bool
	PasswordHash             string
}

type GatewayAccessGroupID struct {
	GatewayName string
	GroupID     string
}

type GatewayRoute struct {
	GatewayName string
	Route       string
}

type Session struct {
	Key      string
	Expiry   time.Time
	DeviceID int32
	ObjectID string
}

type SessionAccessGroupID struct {
	SessionKey string
	GroupID    string
}

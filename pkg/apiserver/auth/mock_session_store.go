// Code generated by mockery v2.30.1. DO NOT EDIT.

package auth

import (
	context "context"

	pb "github.com/nais/device/pkg/pb"
	mock "github.com/stretchr/testify/mock"
)

// MockSessionStore is an autogenerated mock type for the SessionStore type
type MockSessionStore struct {
	mock.Mock
}

// All provides a mock function with given fields:
func (_m *MockSessionStore) All() []*pb.Session {
	ret := _m.Called()

	var r0 []*pb.Session
	if rf, ok := ret.Get(0).(func() []*pb.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Session)
		}
	}

	return r0
}

// CachedSessionFromDeviceID provides a mock function with given fields: _a0
func (_m *MockSessionStore) CachedSessionFromDeviceID(_a0 int64) (*pb.Session, error) {
	ret := _m.Called(_a0)

	var r0 *pb.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*pb.Session, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int64) *pb.Session); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockSessionStore) Get(_a0 context.Context, _a1 string) (*pb.Session, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pb.Session, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pb.Session); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: _a0, _a1
func (_m *MockSessionStore) Set(_a0 context.Context, _a1 *pb.Session) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.Session) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockSessionStore creates a new instance of MockSessionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionStore {
	mock := &MockSessionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

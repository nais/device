// Code generated by mockery v2.30.1. DO NOT EDIT.

package database

import (
	context "context"

	sqlc "github.com/nais/device/pkg/apiserver/sqlc"
	mock "github.com/stretchr/testify/mock"
)

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

// AddDevice provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) AddDevice(ctx context.Context, arg sqlc.AddDeviceParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.AddDeviceParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddGateway provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) AddGateway(ctx context.Context, arg sqlc.AddGatewayParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.AddGatewayParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddSession provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) AddSession(ctx context.Context, arg sqlc.AddSessionParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.AddSessionParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeviceByID provides a mock function with given fields: ctx, id
func (_m *MockQuerier) GetDeviceByID(ctx context.Context, id int32) (*sqlc.Device, error) {
	ret := _m.Called(ctx, id)

	var r0 *sqlc.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*sqlc.Device, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *sqlc.Device); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlc.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceByPublicKey provides a mock function with given fields: ctx, publicKey
func (_m *MockQuerier) GetDeviceByPublicKey(ctx context.Context, publicKey string) (*sqlc.Device, error) {
	ret := _m.Called(ctx, publicKey)

	var r0 *sqlc.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sqlc.Device, error)); ok {
		return rf(ctx, publicKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sqlc.Device); ok {
		r0 = rf(ctx, publicKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlc.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, publicKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceBySerialAndPlatform provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetDeviceBySerialAndPlatform(ctx context.Context, arg sqlc.GetDeviceBySerialAndPlatformParams) (*sqlc.Device, error) {
	ret := _m.Called(ctx, arg)

	var r0 *sqlc.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.GetDeviceBySerialAndPlatformParams) (*sqlc.Device, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.GetDeviceBySerialAndPlatformParams) *sqlc.Device); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlc.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.GetDeviceBySerialAndPlatformParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevices provides a mock function with given fields: ctx
func (_m *MockQuerier) GetDevices(ctx context.Context) ([]*sqlc.Device, error) {
	ret := _m.Called(ctx)

	var r0 []*sqlc.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*sqlc.Device, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*sqlc.Device); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sqlc.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGatewayByName provides a mock function with given fields: ctx, name
func (_m *MockQuerier) GetGatewayByName(ctx context.Context, name string) (*sqlc.Gateway, error) {
	ret := _m.Called(ctx, name)

	var r0 *sqlc.Gateway
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sqlc.Gateway, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sqlc.Gateway); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlc.Gateway)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGateways provides a mock function with given fields: ctx
func (_m *MockQuerier) GetGateways(ctx context.Context) ([]*sqlc.Gateway, error) {
	ret := _m.Called(ctx)

	var r0 []*sqlc.Gateway
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*sqlc.Gateway, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*sqlc.Gateway); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sqlc.Gateway)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMostRecentDeviceSession provides a mock function with given fields: ctx, deviceID
func (_m *MockQuerier) GetMostRecentDeviceSession(ctx context.Context, deviceID int32) (*sqlc.GetMostRecentDeviceSessionRow, error) {
	ret := _m.Called(ctx, deviceID)

	var r0 *sqlc.GetMostRecentDeviceSessionRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*sqlc.GetMostRecentDeviceSessionRow, error)); ok {
		return rf(ctx, deviceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *sqlc.GetMostRecentDeviceSessionRow); ok {
		r0 = rf(ctx, deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlc.GetMostRecentDeviceSessionRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionByKey provides a mock function with given fields: ctx, key
func (_m *MockQuerier) GetSessionByKey(ctx context.Context, key *string) (*sqlc.GetSessionByKeyRow, error) {
	ret := _m.Called(ctx, key)

	var r0 *sqlc.GetSessionByKeyRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) (*sqlc.GetSessionByKeyRow, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) *sqlc.GetSessionByKeyRow); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlc.GetSessionByKeyRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessions provides a mock function with given fields: ctx
func (_m *MockQuerier) GetSessions(ctx context.Context) ([]*sqlc.GetSessionsRow, error) {
	ret := _m.Called(ctx)

	var r0 []*sqlc.GetSessionsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*sqlc.GetSessionsRow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*sqlc.GetSessionsRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sqlc.GetSessionsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transaction provides a mock function with given fields: ctx, callback
func (_m *MockQuerier) Transaction(ctx context.Context, callback func(context.Context, *sqlc.Queries) error) error {
	ret := _m.Called(ctx, callback)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context, *sqlc.Queries) error) error); ok {
		r0 = rf(ctx, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDevice provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateDevice(ctx context.Context, arg sqlc.UpdateDeviceParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.UpdateDeviceParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGateway provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateGateway(ctx context.Context, arg sqlc.UpdateGatewayParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.UpdateGatewayParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGatewayDynamicFields provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateGatewayDynamicFields(ctx context.Context, arg sqlc.UpdateGatewayDynamicFieldsParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.UpdateGatewayDynamicFieldsParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

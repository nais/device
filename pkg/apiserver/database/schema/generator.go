// Database migration generator, see README.md in this directory for instructions.

package main

import (
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"sort"
	"strconv"

	log "github.com/sirupsen/logrus"
)

//go:generate go run generator.go

var header = `// file generated by go generate

package database

var migrations = []string{
`

var footer = `
}
`

func textify(fn string, w io.Writer) error {
	file, err := ioutil.ReadFile(fn)
	if err != nil {
		return err
	}

	_, err = w.Write([]byte(fmt.Sprintf("%q", file)))
	if err != nil {
		return err
	}

	_, err = io.WriteString(w, ",\n")

	return err
}

func main() {
	files, err := ioutil.ReadDir("./")
	if err != nil {
		log.Fatal(err)
	}

	names := make([]string, 0)

	for _, file := range files {
		fn := file.Name()
		if file.IsDir() {
			log.Infof("skip directory %s", fn)
			continue
		}
		if len(fn) < 4 || fn[len(fn)-4:] != ".sql" {
			log.Infof("skip non-sql file %s", fn)
			continue
		}

		names = append(names, fn)
	}

	sort.Strings(names)

	out, err := os.OpenFile("../zz-migrations-generated.go", os.O_CREATE|os.O_TRUNC|os.O_RDWR, 0666)
	if err != nil {
		log.Fatal(err)
	}
	defer out.Close()

	_, err = io.WriteString(out, header)
	if err != nil {
		log.Fatal(err)
	}

	// verify correct index order
	for i, file := range names {
		index, err := strconv.Atoi(file[:4])
		if err != nil {
			log.Fatal(err)
		}

		if i+1 != index {
			log.Fatalf("unexpected migration index %04d, expected %04d: %s", index, i+1, file)
		}

		log.Infof("migrate %s", file)

		err = textify(file, out)
		if err != nil {
			log.Fatalf("%s: %s", file, err)
		}
	}

	_, err = io.WriteString(out, footer)
	if err != nil {
		log.Fatal(err)
	}
}

// Code generated by mockery 2.9.2. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/nais/device/pkg/pb"
)

// DeviceHelperClient is an autogenerated mock type for the DeviceHelperClient type
type DeviceHelperClient struct {
	mock.Mock
}

// Configure provides a mock function with given fields: ctx, in, opts
func (_m *DeviceHelperClient) Configure(ctx context.Context, in *pb.Configuration, opts ...grpc.CallOption) (*pb.ConfigureResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.ConfigureResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.Configuration, ...grpc.CallOption) *pb.ConfigureResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ConfigureResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.Configuration, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Teardown provides a mock function with given fields: ctx, in, opts
func (_m *DeviceHelperClient) Teardown(ctx context.Context, in *pb.TeardownRequest, opts ...grpc.CallOption) (*pb.TeardownResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.TeardownResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.TeardownRequest, ...grpc.CallOption) *pb.TeardownResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.TeardownResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.TeardownRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upgrade provides a mock function with given fields: ctx, in, opts
func (_m *DeviceHelperClient) Upgrade(ctx context.Context, in *pb.UpgradeRequest, opts ...grpc.CallOption) (*pb.UpgradeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.UpgradeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpgradeRequest, ...grpc.CallOption) *pb.UpgradeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.UpgradeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpgradeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

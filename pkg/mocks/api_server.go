// Code generated by mockery 2.9.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/nais/device/pkg/pb"
)

// APIServer is an autogenerated mock type for the APIServer type
type APIServer struct {
	mock.Mock
}

// AddDevice provides a mock function with given fields: ctx, device
func (_m *APIServer) AddDevice(ctx context.Context, device *pb.Device) error {
	ret := _m.Called(ctx, device)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.Device) error); ok {
		r0 = rf(ctx, device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddGateway provides a mock function with given fields: ctx, name, endpoint, publicKey
func (_m *APIServer) AddGateway(ctx context.Context, name string, endpoint string, publicKey string) error {
	ret := _m.Called(ctx, name, endpoint, publicKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, name, endpoint, publicKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddSessionInfo provides a mock function with given fields: ctx, si
func (_m *APIServer) AddSessionInfo(ctx context.Context, si *pb.Session) error {
	ret := _m.Called(ctx, si)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.Session) error); ok {
		r0 = rf(ctx, si)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Migrate provides a mock function with given fields: ctx
func (_m *APIServer) Migrate(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadDevice provides a mock function with given fields: publicKey
func (_m *APIServer) ReadDevice(publicKey string) (*pb.Device, error) {
	ret := _m.Called(publicKey)

	var r0 *pb.Device
	if rf, ok := ret.Get(0).(func(string) *pb.Device); ok {
		r0 = rf(publicKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(publicKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDeviceById provides a mock function with given fields: ctx, deviceID
func (_m *APIServer) ReadDeviceById(ctx context.Context, deviceID int64) (*pb.Device, error) {
	ret := _m.Called(ctx, deviceID)

	var r0 *pb.Device
	if rf, ok := ret.Get(0).(func(context.Context, int64) *pb.Device); ok {
		r0 = rf(ctx, deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDeviceBySerialPlatformUsername provides a mock function with given fields: ctx, serial, platform, username
func (_m *APIServer) ReadDeviceBySerialPlatformUsername(ctx context.Context, serial string, platform string, username string) (*pb.Device, error) {
	ret := _m.Called(ctx, serial, platform, username)

	var r0 *pb.Device
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *pb.Device); ok {
		r0 = rf(ctx, serial, platform, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, serial, platform, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDevices provides a mock function with given fields:
func (_m *APIServer) ReadDevices() ([]*pb.Device, error) {
	ret := _m.Called()

	var r0 []*pb.Device
	if rf, ok := ret.Get(0).(func() []*pb.Device); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadGateway provides a mock function with given fields: name
func (_m *APIServer) ReadGateway(name string) (*pb.Gateway, error) {
	ret := _m.Called(name)

	var r0 *pb.Gateway
	if rf, ok := ret.Get(0).(func(string) *pb.Gateway); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Gateway)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadGateways provides a mock function with given fields:
func (_m *APIServer) ReadGateways() ([]*pb.Gateway, error) {
	ret := _m.Called()

	var r0 []*pb.Gateway
	if rf, ok := ret.Get(0).(func() []*pb.Gateway); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Gateway)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadMostRecentSessionInfo provides a mock function with given fields: ctx, deviceID
func (_m *APIServer) ReadMostRecentSessionInfo(ctx context.Context, deviceID int64) (*pb.Session, error) {
	ret := _m.Called(ctx, deviceID)

	var r0 *pb.Session
	if rf, ok := ret.Get(0).(func(context.Context, int64) *pb.Session); ok {
		r0 = rf(ctx, deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadSessionInfo provides a mock function with given fields: ctx, key
func (_m *APIServer) ReadSessionInfo(ctx context.Context, key string) (*pb.Session, error) {
	ret := _m.Called(ctx, key)

	var r0 *pb.Session
	if rf, ok := ret.Get(0).(func(context.Context, string) *pb.Session); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadSessionInfos provides a mock function with given fields: ctx
func (_m *APIServer) ReadSessionInfos(ctx context.Context) ([]*pb.Session, error) {
	ret := _m.Called(ctx)

	var r0 []*pb.Session
	if rf, ok := ret.Get(0).(func(context.Context) []*pb.Session); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDevices provides a mock function with given fields: ctx, devices
func (_m *APIServer) UpdateDevices(ctx context.Context, devices []*pb.Device) error {
	ret := _m.Called(ctx, devices)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*pb.Device) error); ok {
		r0 = rf(ctx, devices)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGateway provides a mock function with given fields: ctx, name, routes, accessGroupIDs, requiresPrivilegedAccess
func (_m *APIServer) UpdateGateway(ctx context.Context, name string, routes []string, accessGroupIDs []string, requiresPrivilegedAccess bool) error {
	ret := _m.Called(ctx, name, routes, accessGroupIDs, requiresPrivilegedAccess)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, []string, bool) error); ok {
		r0 = rf(ctx, name, routes, accessGroupIDs, requiresPrivilegedAccess)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Code generated by mockery 2.9.2. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "github.com/nais/device/pkg/pb"
	mock "github.com/stretchr/testify/mock"
)

// DeviceHelperServer is an autogenerated mock type for the DeviceHelperServer type
type DeviceHelperServer struct {
	mock.Mock
}

// Configure provides a mock function with given fields: _a0, _a1
func (_m *DeviceHelperServer) Configure(_a0 context.Context, _a1 *pb.Configuration) (*pb.ConfigureResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.ConfigureResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.Configuration) *pb.ConfigureResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ConfigureResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.Configuration) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Teardown provides a mock function with given fields: _a0, _a1
func (_m *DeviceHelperServer) Teardown(_a0 context.Context, _a1 *pb.TeardownRequest) (*pb.TeardownResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.TeardownResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.TeardownRequest) *pb.TeardownResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.TeardownResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.TeardownRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upgrade provides a mock function with given fields: _a0, _a1
func (_m *DeviceHelperServer) Upgrade(_a0 context.Context, _a1 *pb.UpgradeRequest) (*pb.UpgradeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.UpgradeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpgradeRequest) *pb.UpgradeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.UpgradeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpgradeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedDeviceHelperServer provides a mock function with given fields:
func (_m *DeviceHelperServer) mustEmbedUnimplementedDeviceHelperServer() {
	_m.Called()
}

// Code generated by mockery 2.9.2. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "github.com/nais/device/pkg/pb"
	mock "github.com/stretchr/testify/mock"
)

// DeviceAgentServer is an autogenerated mock type for the DeviceAgentServer type
type DeviceAgentServer struct {
	mock.Mock
}

// ConfigureJITA provides a mock function with given fields: _a0, _a1
func (_m *DeviceAgentServer) ConfigureJITA(_a0 context.Context, _a1 *pb.ConfigureJITARequest) (*pb.ConfigureJITAResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.ConfigureJITAResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ConfigureJITARequest) *pb.ConfigureJITAResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ConfigureJITAResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.ConfigureJITARequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAgentConfiguration provides a mock function with given fields: _a0, _a1
func (_m *DeviceAgentServer) GetAgentConfiguration(_a0 context.Context, _a1 *pb.GetAgentConfigurationRequest) (*pb.GetAgentConfigurationResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetAgentConfigurationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAgentConfigurationRequest) *pb.GetAgentConfigurationResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAgentConfigurationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAgentConfigurationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *DeviceAgentServer) Login(_a0 context.Context, _a1 *pb.LoginRequest) (*pb.LoginResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.LoginRequest) *pb.LoginResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.LoginResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.LoginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: _a0, _a1
func (_m *DeviceAgentServer) Logout(_a0 context.Context, _a1 *pb.LogoutRequest) (*pb.LogoutResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.LogoutResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.LogoutRequest) *pb.LogoutResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.LogoutResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.LogoutRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAgentConfiguration provides a mock function with given fields: _a0, _a1
func (_m *DeviceAgentServer) SetAgentConfiguration(_a0 context.Context, _a1 *pb.SetAgentConfigurationRequest) (*pb.SetAgentConfigurationResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.SetAgentConfigurationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.SetAgentConfigurationRequest) *pb.SetAgentConfigurationResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.SetAgentConfigurationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.SetAgentConfigurationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with given fields: _a0, _a1
func (_m *DeviceAgentServer) Status(_a0 *pb.AgentStatusRequest, _a1 pb.DeviceAgent_StatusServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pb.AgentStatusRequest, pb.DeviceAgent_StatusServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mustEmbedUnimplementedDeviceAgentServer provides a mock function with given fields:
func (_m *DeviceAgentServer) mustEmbedUnimplementedDeviceAgentServer() {
	_m.Called()
}

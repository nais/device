// Code generated by mockery 2.9.2. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/nais/device/pkg/pb"
)

// DeviceAgentClient is an autogenerated mock type for the DeviceAgentClient type
type DeviceAgentClient struct {
	mock.Mock
}

// ConfigureJITA provides a mock function with given fields: ctx, in, opts
func (_m *DeviceAgentClient) ConfigureJITA(ctx context.Context, in *pb.ConfigureJITARequest, opts ...grpc.CallOption) (*pb.ConfigureJITAResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.ConfigureJITAResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ConfigureJITARequest, ...grpc.CallOption) *pb.ConfigureJITAResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ConfigureJITAResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.ConfigureJITARequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAgentConfiguration provides a mock function with given fields: ctx, in, opts
func (_m *DeviceAgentClient) GetAgentConfiguration(ctx context.Context, in *pb.GetAgentConfigurationRequest, opts ...grpc.CallOption) (*pb.GetAgentConfigurationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAgentConfigurationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAgentConfigurationRequest, ...grpc.CallOption) *pb.GetAgentConfigurationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAgentConfigurationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAgentConfigurationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, in, opts
func (_m *DeviceAgentClient) Login(ctx context.Context, in *pb.LoginRequest, opts ...grpc.CallOption) (*pb.LoginResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.LoginRequest, ...grpc.CallOption) *pb.LoginResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.LoginResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.LoginRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, in, opts
func (_m *DeviceAgentClient) Logout(ctx context.Context, in *pb.LogoutRequest, opts ...grpc.CallOption) (*pb.LogoutResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.LogoutResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.LogoutRequest, ...grpc.CallOption) *pb.LogoutResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.LogoutResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.LogoutRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAgentConfiguration provides a mock function with given fields: ctx, in, opts
func (_m *DeviceAgentClient) SetAgentConfiguration(ctx context.Context, in *pb.SetAgentConfigurationRequest, opts ...grpc.CallOption) (*pb.SetAgentConfigurationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.SetAgentConfigurationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.SetAgentConfigurationRequest, ...grpc.CallOption) *pb.SetAgentConfigurationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.SetAgentConfigurationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.SetAgentConfigurationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with given fields: ctx, in, opts
func (_m *DeviceAgentClient) Status(ctx context.Context, in *pb.AgentStatusRequest, opts ...grpc.CallOption) (pb.DeviceAgent_StatusClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 pb.DeviceAgent_StatusClient
	if rf, ok := ret.Get(0).(func(context.Context, *pb.AgentStatusRequest, ...grpc.CallOption) pb.DeviceAgent_StatusClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pb.DeviceAgent_StatusClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.AgentStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code generated by mockery 2.9.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/nais/device/pkg/pb"
)

// OSConfigurator is an autogenerated mock type for the OSConfigurator type
type OSConfigurator struct {
	mock.Mock
}

// Prerequisites provides a mock function with given fields:
func (_m *OSConfigurator) Prerequisites() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupInterface provides a mock function with given fields: ctx, cfg
func (_m *OSConfigurator) SetupInterface(ctx context.Context, cfg *pb.Configuration) error {
	ret := _m.Called(ctx, cfg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.Configuration) error); ok {
		r0 = rf(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupRoutes provides a mock function with given fields: ctx, gateways
func (_m *OSConfigurator) SetupRoutes(ctx context.Context, gateways []*pb.Gateway) error {
	ret := _m.Called(ctx, gateways)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*pb.Gateway) error); ok {
		r0 = rf(ctx, gateways)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SyncConf provides a mock function with given fields: ctx, cfg
func (_m *OSConfigurator) SyncConf(ctx context.Context, cfg *pb.Configuration) error {
	ret := _m.Called(ctx, cfg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.Configuration) error); ok {
		r0 = rf(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeardownInterface provides a mock function with given fields: ctx
func (_m *OSConfigurator) TeardownInterface(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

name: Release naisdevice
on:
  push:
    tags:
      - "*"
env:
  go_version: "1.18"
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}
      - name: run tests
        run: |
          sudo apt update
          sudo apt install --yes build-essential libgtk-3-dev libappindicator3-dev libindicator3-dev libayatana-appindicator3-dev
          make test

  set-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - name: set version
        id: set-version
        run: echo ::set-output name=version::${GITHUB_REF#refs/*/}

  build:
    needs:
      - set-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [linux-client, windows-client]
        gotags: ["", "tenant"]
        include:
          - output-suffix: ""
          - gotags: "tenant"
            output-suffix: "-tenant"

    steps:
      - uses: actions/checkout@v2
      - name: Install build tools for linux
        if: matrix.target == 'linux-client'
        run: |
          sudo apt update
          sudo apt install --yes build-essential libgtk-3-dev libappindicator3-dev libindicator3-dev libayatana-appindicator3-dev

      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}

      - name: build ${{ matrix.target }}
        run: |
          make ${{ matrix.target }} GOTAGS=${{ matrix.gotags }} VERSION=${{ needs.set-version.outputs.version }}
          md5sum "bin/${{ matrix.target }}"/*

      - name: upload ${{ matrix.target }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}${{ matrix.output-suffix }}
          path: bin/${{ matrix.target }}
          if-no-files-found: error

  # Also builds, should probably download artifact instead
  build-macos:
    strategy:
      matrix:
        gotags: ["", "tenant"]
        include:
          - output-suffix: ""
          - gotags: "tenant"
            output-suffix: "-tenant"
    needs:
      - set-version
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
      - name: build pkg
        env:
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
        run: |
          make pkg GOTAGS=${{ matrix.gotags }} VERSION=${{ needs.set-version.outputs.version }}
          md5 bin/macos-client/*
          md5 naisdevice.pkg
      - name: upload pkg
        uses: actions/upload-artifact@v2
        with:
          name: pkg${{ matrix.output-suffix }}
          path: naisdevice.pkg
          if-no-files-found: error

  build-windows:
    strategy:
      matrix:
        output-suffix: ["", "-tenant"]
    needs:
      - build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1
      - name: download windows binaries
        uses: actions/download-artifact@v2
        with:
          name: windows-client${{ matrix.output-suffix }}
          path: bin/windows
      - name: set version env var
        run: |
          $version = 800+[int]$Env:GITHUB_RUN_NUMBER
          "WINDOWS_BUILD_NUMBER=$version" >> $Env:GITHUB_ENV
      - name: create windows installer
        run: |
          msbuild packaging\windows\naisdevice.wixproj
          md5sum bin/windows/naisdevice.msi
      - name: upload windows installer
        uses: actions/upload-artifact@v2
        with:
          name: windows-installer${{ matrix.output-suffix }}
          path: bin/windows/naisdevice.msi
          if-no-files-found: error

  build-linux:
    strategy:
      matrix:
        output-suffix: ["", "-tenant"]
    needs:
      - set-version
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}
      - name: download linux binaries
        uses: actions/download-artifact@v2
        with:
          name: linux-client${{ matrix.output-suffix }}
          path: bin/linux-client
      - name: create debian package
        run: |
          sudo apt update
          sudo apt install --yes build-essential ruby ruby-dev rubygems libgtk-3-dev libappindicator3-dev libindicator3-dev libayatana-appindicator3-dev
          sudo gem install --no-document fpm -v 1.13.1
          chmod a+x bin/linux-client/naisdevice*
          make deb VERSION=${{ needs.set-version.outputs.version }}
          md5sum naisdevice*.deb
      - name: upload debian package
        uses: actions/upload-artifact@v2
        with:
          name: deb${{ matrix.output-suffix }}
          path: naisdevice*.deb
          if-no-files-found: error

  new_release:
    needs:
      - set-version
      - test
      - build
      - build-macos
      - build-windows
      - build-linux
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.set-version.outputs.version }}
          release_name: Release ${{ needs.set-version.outputs.version }}
          draft: false
          prerelease: false

  release:
    strategy:
      matrix:
        output-suffix: ["", "-tenant"]
    needs:
      - set-version
      - test
      - build
      - build-macos
      - build-windows
      - build-linux
      - new_release
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: download windows installer
        uses: actions/download-artifact@v2
        with:
          name: windows-installer${{ matrix.output-suffix }}
          path: bin/windows
      - name: upload naisdevice.msi
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.new_release.outputs.upload_url }}
          asset_path: ./bin/windows/naisdevice.msi
          asset_name: naisdevice${{ matrix.output-suffix }}.msi
          asset_content_type: application/octet-stream

      - name: download pkg
        uses: actions/download-artifact@v2
        with:
          name: pkg${{ matrix.output-suffix }}
      - name: upload macos pkg to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.new_release.outputs.upload_url }}
          asset_path: ./naisdevice.pkg
          asset_name: naisdevice${{ matrix.output-suffix }}.pkg
          asset_content_type: application/octet-stream

      - name: download deb
        uses: actions/download-artifact@v2
        with:
          name: deb${{ matrix.output-suffix }}
      - name: upload debian package to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.new_release.outputs.upload_url }}
          asset_path: ./naisdevice_${{ needs.set-version.outputs.version }}_amd64.deb
          asset_name: naisdevice${{ matrix.output-suffix }}.deb
          asset_content_type: application/octet-stream

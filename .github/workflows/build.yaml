name: Publish release

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches: [master]
    paths-ignore: ["**.md"]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  release-info:
    name: Generate release info
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Install tooling
        uses: jdx/mise-action@v3
        with:
          cache: false
      - name: Generate release info
        id: generate
        run: |
          mise run ci:release-info
    outputs:
      version: ${{ steps.generate.outputs.version }}
      changelog: ${{ steps.generate.outputs.changelog }}

  checks:
    name: Run static code analysis and tests
    needs:
      - release-info
    strategy:
      matrix:
        mise_task:
          - check:govulncheck
          - check:staticcheck
          - check:govet
          - ci:fmt
          - test
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Install tooling
        uses: jdx/mise-action@v3
        with:
          cache: false
      - name: mise run ${{ matrix.mise_task }}
        run: mise run ${{ matrix.mise_task }}

  builds:
    name: Build binaries and packages
    needs:
      - release-info
    strategy:
      fail-fast: false
      matrix:
        gotags: ["", "tenant"]
        arch: [amd64, arm64]
        os:
          - goos: windows
            task: package:windows
            runner: ubuntu-latest
          - goos: linux
            task: package:linux
            runner: ubuntu-latest
          - goos: darwin
            task: package:macos
            runner: macos-latest
    runs-on: ${{ matrix.os.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Install tooling
        uses: jdx/mise-action@v3
        with:
          cache: false

      ###############
      ### Windows ###
      ###############
      - name: Prepare for windows build
        if: matrix.os.goos == 'windows'
        env:
          MSI_SIGN_CERT: "${{ secrets.MSI_SIGN_CERT }}"
          MSI_SIGN_KEY: "${{ secrets.MSI_SIGN_KEY }}"
        run: |
          sudo apt-get update
          sudo apt-get install --yes nsis osslsigncode
      - name: Build exe
        if: matrix.os.goos == 'windows'
        env:
          VERSION: "${{ needs.release-info.outputs.version }}"
          GOOS: "${{ matrix.os.goos }}"
          GOARCH: "${{ matrix.arch }}"
          GOTAGS: "${{ matrix.gotags }}"
        run: mise run package:windows

      #############
      ### macOS ###
      #############
      - name: Prepare for macos build
        if: matrix.os.goos == 'darwin'
        uses: Apple-Actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
      - name: Build pkg
        if: matrix.os.goos == 'darwin'
        env:
          APPLE_NOTARIZE_AUTH_KEY_P8_BASE64: "${{ secrets.APPLE_NOTARIZE_AUTH_KEY_P8_BASE64 }}"
          APPLE_NOTARIZE_D: "${{ secrets.APPLE_NOTARIZE_D }}"
          APPLE_NOTARIZE_I: "${{ secrets.APPLE_NOTARIZE_I }}"
          GOOS: "${{ matrix.os.goos }}"
          GOARCH: "${{ matrix.arch }}"
          GOTAGS: "${{ matrix.gotags }}"
          VERSION: "${{ needs.release-info.outputs.version }}"
          RELEASE: "${{ startsWith(github.ref, 'refs/tags/') && 'true' || 'false' }}"
        run: |
          # TODO: Looks like this is no longer needed with macos-latest
          # brew link --overwrite python@3.12

          mise run package:macos
          if [[ -n "${{ matrix.output-suffix }}" ]]; then
            mv naisdevice.pkg naisdevice${{ matrix.output-suffix }}.pkg
          fi

      #############
      ### Linux ###
      #############
      - name: Build deb
        if: matrix.os.goos == 'linux'
        env:
          VERSION: "${{ needs.release-info.outputs.version }}"
          GOOS: "${{ matrix.os.goos }}"
          GOARCH: "${{ matrix.arch }}"
          GOTAGS: "${{ matrix.gotags }}"
        run: mise run package:linux

      ###########
      ### All ###
      ###########
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: archive-${{ matrix.os }}-${{ matrix.arch }}
          path: release_artifacts/*

  # Used by GitHub to determine if all checks/builds have passed
  branch-protection-checkpoint:
    name: Branch protection checkpoint
    needs:
      - checks
      - builds
    runs-on: ubuntu-latest
    steps:
      - run: echo Checks and builds passed

  release-github:
    if: github.ref == 'refs/heads/main' && needs.release-info.outputs.changelog != ''
    needs:
      - release-info
      - builds
      - checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: DeterminateSystems/nix-installer-action@v19
      - name: Create tag
        run: |
          git tag ${{ needs.release-info.outputs.version }}
      - name: Download artifacts
        uses: actions/download-artifact@v5
      - name: Generate hashes
        id: hashes
        run: |
          echo '{}' > hashes.json
          version="${{ needs.release-info.outputs.version }}"

          for arch in amd64 arm64; do
            # Generate hashes for debs
            file="nais-cli_${version}_${arch}.deb"
            hash="$(nix-hash --type sha256 --flat "./deb-${arch}/${file}")"
            echo "$hash  $file" >> checksums.txt

            # Generate hashes for archives
            for os in linux darwin windows; do
              file="nais-cli_${version}_${os}_${arch}.tar.gz"
              hash16="$(nix-hash --type sha256 --flat "./archive-${os}-${arch}/${file}")"
              hash32="$(nix-hash --type sha256 --flat --base32 "./archive-${os}-${arch}/${file}")"
              echo "$hash16  $file" >> checksums.txt

              # This is used by the external release jobs (nur, homebrew, scoop)
              jq --arg os "$os" --arg arch "$arch" --arg encoding "base16" --arg hash "$hash16" '.[$os][$arch][$encoding] = $hash' hashes.json > new_hashes.json; mv {new_,}hashes.json
              jq --arg os "$os" --arg arch "$arch" --arg encoding "base32" --arg hash "$hash32" '.[$os][$arch][$encoding] = $hash' hashes.json > new_hashes.json; mv {new_,}hashes.json
            done
          done

      - name: Upload hashes
        uses: actions/upload-artifact@v4
        with:
          name: release_asset_vars-env
          path: release_asset_vars.env
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release-info.outputs.version }}
          body: ${{ needs.release-info.outputs.changelog }}
          prerelease: false
          files: |
            ./release_artifacts/*

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: |
          echo "## :rocket: Release ${{ needs.release-info.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "A new release is available over at https://github.com/${{ github.repository }}/releases/tag/${{ needs.release-info.outputs.version }}." >> $GITHUB_STEP_SUMMARY

  release-gar:
    if: github.ref == 'refs/heads/main'
    needs:
      - release-info
      - release-github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v5
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v3"
        with:
          workload_identity_provider: ${{ secrets.NAIS_IO_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: "gh-cli@nais-io.iam.gserviceaccount.com"
          token_format: "access_token"
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v3"
      - name: "Download arm64 deb artifacts"
        uses: actions/download-artifact@v5
        with:
          name: deb-arm64
      - name: "Download amd64 deb artifacts"
        uses: actions/download-artifact@v5
        with:
          name: deb-amd64
      - name: "Upload new deb file to Google repository"
        env:
          VERSION: ${{ needs.release-info.outputs.version }}
        run: |
          gcloud --project nais-io artifacts apt upload nais-ppa --quiet --source nais-cli_${VERSION}_arm64.deb --location europe-north1
          gcloud --project nais-io artifacts apt upload nais-ppa --quiet --source nais-cli_${VERSION}_amd64.deb --location europe-north1

  release-external-repos:
    if: github.ref == 'refs/heads/main'
    needs:
      - release-info
      - release-github
    strategy:
      matrix:
        target:
          - template: nur.nix
            repo: nais/nur
            file: pkgs/nais-cli.nix
          - template: scoop.json
            repo: nais/scoop-bucket
            file: nais-cli.json
          - template: homebrew.rb
            repo: nais/homebrew-tap
            file: Formula/nais.rb
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v5
      - uses: navikt/github-app-token-generator@v1
        id: token
        with:
          private-key: "${{ secrets.NAIS_APP_PRIVATE_KEY }}"
          app-id: "${{ secrets.NAIS_APP_ID }}"
          repo: ${{ matrix.target.repo }}
      - name: Download hashes
        uses: actions/download-artifact@v5
        with:
          name: release_asset_vars-env
      - name: "Generate manifest"
        run: |
          git clone "https://git:${{ steps.token.outputs.token }}@github.com/${{ matrix.target.repo }}" repo
          cd repo || exit 1

          env "$(xargs -0 <release_asset_vars.env) " \
            envsubst "$(sed 's/^/$/' release_asset_vars.env)"

          git -c user.name='naisbot' -c user.email='bot@nais.io' commit -am "Bump nais-cli to ${{ needs.release-info.outputs.version }}"
          git push

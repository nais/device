name: Test, build and release
on:
  push:
    paths:
      - 'Makefile'
      - 'go.mod'
      - '**.go'
      - '.github/workflows/master.yml'
      - 'packaging/**'
env:
  go_version: '1.15'
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11.7
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5433:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ env.go_version }}
    - name: run tests
      run: |
        sudo apt update
        sudo apt install --yes build-essential libgtk-3-dev libappindicator3-dev
        make run-integration-test

  set-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - name: set version
        id: set-version
        run: echo ::set-output name=version::$(date "+%Y-%m-%d-%H%M%S")

  build:
    needs:
      - set-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [linux-client, windows-client, controlplane]
    steps:
      - uses: actions/checkout@v2
      - name: Install build tools for linux
        if: matrix.target == 'linux-client'
        run: |
          sudo apt update
          sudo apt install --yes build-essential libgtk-3-dev libappindicator3-dev

      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}

      - name: build ${{ matrix.target }}
        run: |
          make ${{ matrix.target }} VERSION=${{ needs.set-version.outputs.version }}

      - name: upload ${{ matrix.target }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}
          path: bin/${{ matrix.target }}
          if-no-files-found: error

  # Also builds, should probably download artifact instead
  build-macos:
    needs:
      - set-version
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ env.go_version }}
   # - name: Import Code-Signing Certificates
   #   uses: Apple-Actions/import-codesign-certs@v1
   #   with:
   #     p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
   #     p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
   # - name: Install gon via HomeBrew for code signing and app notarization
   #   run: |
   #     brew tap mitchellh/gon
   #     brew install mitchellh/gon/gon
    - name: build pkg
      env:
        AC_USERNAME: ${{ secrets.AC_USERNAME }}
        AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
      run: |
        make pkg VERSION=${{ needs.set-version.outputs.version }}
    - name: upload pkg
      uses: actions/upload-artifact@v2
      with:
        name: pkg
        path: naisdevice.pkg
        if-no-files-found: error

  build-windows:
    needs:
      - build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1
      - name: download windows binaries
        uses: actions/download-artifact@v2
        with:
          name: windows-client
          path: bin/windows
      - name: create windows installer
        run: |
          msbuild packaging\windows\naisdevice.wixproj
      - name: upload windows installer
        uses: actions/upload-artifact@v2
        with:
          name: windows-installer
          path: bin/windows/naisdevice.msi
          if-no-files-found: error

  build-linux:
    needs:
      - set-version
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}
      - name: download linux binaries
        uses: actions/download-artifact@v2
        with:
          name: linux-client
          path: bin/linux-client
      - name: create debian package
        run: |
          sudo apt update
          sudo apt install --yes build-essential ruby ruby-dev rubygems libgtk-3-dev libappindicator3-dev
          sudo gem install --no-document fpm -v 1.11.0
          chmod a+x bin/linux-client/naisdevice*
          make deb VERSION=${{ needs.set-version.outputs.version }}
      - name: upload debian package
        uses: actions/upload-artifact@v2
        with:
          name: deb
          path: naisdevice*.deb
          if-no-files-found: error

  release:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs:
      - set-version
      - test
      - build
      - build-macos
      - build-windows
      - build-linux
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.set-version.outputs.version }}
          release_name: Release ${{ needs.set-version.outputs.version }}
          draft: false
          prerelease: false

      - name: download controlplane artifacts
        uses: actions/download-artifact@v2
        with:
          name: controlplane
          path: bin/controlplane
      - name: upload apiserver binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/controlplane/apiserver
          asset_name: apiserver
          asset_content_type: application/octet-stream
      - name: upload gateway-agent binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/controlplane/gateway-agent
          asset_name: gateway-agent
          asset_content_type: application/octet-stream
      - name: upload bootstrap-api binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/controlplane/bootstrap-api
          asset_name: bootstrap-api
          asset_content_type: application/octet-stream
      - name: upload prometheus-agent binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/controlplane/prometheus-agent
          asset_name: prometheus-agent
          asset_content_type: application/octet-stream

      - name: download windows installer
        uses: actions/download-artifact@v2
        with:
          name: windows-installer
          path: bin/windows
      - name: upload naisdevice.msi
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/windows/naisdevice.msi
          asset_name: naisdevice.msi
          asset_content_type: application/octet-stream

      - name: download pkg
        uses: actions/download-artifact@v2
        with:
          name: pkg
      - name: upload macos pkg to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./naisdevice.pkg
          asset_name: naisdevice.pkg
          asset_content_type: application/octet-stream

      - name: download deb
        uses: actions/download-artifact@v2
        with:
          name: deb
      - name: upload debian package to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./naisdevice_${{ needs.set-version.outputs.version }}_amd64.deb
          asset_name: naisdevice.deb
          asset_content_type: application/octet-stream


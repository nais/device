// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package runtimeconfig

import (
	"context"

	"github.com/nais/device/internal/device-agent/auth"
	"github.com/nais/device/pkg/pb"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockRuntimeConfig creates a new instance of MockRuntimeConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRuntimeConfig(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockRuntimeConfig {
	mock := &MockRuntimeConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRuntimeConfig is an autogenerated mock type for the RuntimeConfig type
type MockRuntimeConfig struct {
	mock.Mock
}

type MockRuntimeConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRuntimeConfig) EXPECT() *MockRuntimeConfig_Expecter {
	return &MockRuntimeConfig_Expecter{mock: &_m.Mock}
}

// APIServerPeer provides a mock function for the type MockRuntimeConfig
func (_mock *MockRuntimeConfig) APIServerPeer() *pb.Gateway {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for APIServerPeer")
	}

	var r0 *pb.Gateway
	if returnFunc, ok := ret.Get(0).(func() *pb.Gateway); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Gateway)
		}
	}
	return r0
}

// MockRuntimeConfig_APIServerPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'APIServerPeer'
type MockRuntimeConfig_APIServerPeer_Call struct {
	*mock.Call
}

// APIServerPeer is a helper method to define mock.On call
func (_e *MockRuntimeConfig_Expecter) APIServerPeer() *MockRuntimeConfig_APIServerPeer_Call {
	return &MockRuntimeConfig_APIServerPeer_Call{Call: _e.mock.On("APIServerPeer")}
}

func (_c *MockRuntimeConfig_APIServerPeer_Call) Run(run func()) *MockRuntimeConfig_APIServerPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRuntimeConfig_APIServerPeer_Call) Return(gateway *pb.Gateway) *MockRuntimeConfig_APIServerPeer_Call {
	_c.Call.Return(gateway)
	return _c
}

func (_c *MockRuntimeConfig_APIServerPeer_Call) RunAndReturn(run func() *pb.Gateway) *MockRuntimeConfig_APIServerPeer_Call {
	_c.Call.Return(run)
	return _c
}

// BuildHelperConfiguration provides a mock function for the type MockRuntimeConfig
func (_mock *MockRuntimeConfig) BuildHelperConfiguration(peers []*pb.Gateway) *pb.Configuration {
	ret := _mock.Called(peers)

	if len(ret) == 0 {
		panic("no return value specified for BuildHelperConfiguration")
	}

	var r0 *pb.Configuration
	if returnFunc, ok := ret.Get(0).(func([]*pb.Gateway) *pb.Configuration); ok {
		r0 = returnFunc(peers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Configuration)
		}
	}
	return r0
}

// MockRuntimeConfig_BuildHelperConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildHelperConfiguration'
type MockRuntimeConfig_BuildHelperConfiguration_Call struct {
	*mock.Call
}

// BuildHelperConfiguration is a helper method to define mock.On call
//   - peers []*pb.Gateway
func (_e *MockRuntimeConfig_Expecter) BuildHelperConfiguration(peers interface{}) *MockRuntimeConfig_BuildHelperConfiguration_Call {
	return &MockRuntimeConfig_BuildHelperConfiguration_Call{Call: _e.mock.On("BuildHelperConfiguration", peers)}
}

func (_c *MockRuntimeConfig_BuildHelperConfiguration_Call) Run(run func(peers []*pb.Gateway)) *MockRuntimeConfig_BuildHelperConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []*pb.Gateway
		if args[0] != nil {
			arg0 = args[0].([]*pb.Gateway)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRuntimeConfig_BuildHelperConfiguration_Call) Return(configuration *pb.Configuration) *MockRuntimeConfig_BuildHelperConfiguration_Call {
	_c.Call.Return(configuration)
	return _c
}

func (_c *MockRuntimeConfig_BuildHelperConfiguration_Call) RunAndReturn(run func(peers []*pb.Gateway) *pb.Configuration) *MockRuntimeConfig_BuildHelperConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// ConnectToAPIServer provides a mock function for the type MockRuntimeConfig
func (_mock *MockRuntimeConfig) ConnectToAPIServer(context1 context.Context) (pb.APIServerClient, func(), error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for ConnectToAPIServer")
	}

	var r0 pb.APIServerClient
	var r1 func()
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (pb.APIServerClient, func(), error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) pb.APIServerClient); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pb.APIServerClient)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) func()); ok {
		r1 = returnFunc(context1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = returnFunc(context1)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRuntimeConfig_ConnectToAPIServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectToAPIServer'
type MockRuntimeConfig_ConnectToAPIServer_Call struct {
	*mock.Call
}

// ConnectToAPIServer is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockRuntimeConfig_Expecter) ConnectToAPIServer(context1 interface{}) *MockRuntimeConfig_ConnectToAPIServer_Call {
	return &MockRuntimeConfig_ConnectToAPIServer_Call{Call: _e.mock.On("ConnectToAPIServer", context1)}
}

func (_c *MockRuntimeConfig_ConnectToAPIServer_Call) Run(run func(context1 context.Context)) *MockRuntimeConfig_ConnectToAPIServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRuntimeConfig_ConnectToAPIServer_Call) Return(aPIServerClient pb.APIServerClient, fn func(), err error) *MockRuntimeConfig_ConnectToAPIServer_Call {
	_c.Call.Return(aPIServerClient, fn, err)
	return _c
}

func (_c *MockRuntimeConfig_ConnectToAPIServer_Call) RunAndReturn(run func(context1 context.Context) (pb.APIServerClient, func(), error)) *MockRuntimeConfig_ConnectToAPIServer_Call {
	_c.Call.Return(run)
	return _c
}

// DialAPIServer provides a mock function for the type MockRuntimeConfig
func (_mock *MockRuntimeConfig) DialAPIServer(context1 context.Context) (*grpc.ClientConn, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for DialAPIServer")
	}

	var r0 *grpc.ClientConn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*grpc.ClientConn, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *grpc.ClientConn); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ClientConn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeConfig_DialAPIServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DialAPIServer'
type MockRuntimeConfig_DialAPIServer_Call struct {
	*mock.Call
}

// DialAPIServer is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockRuntimeConfig_Expecter) DialAPIServer(context1 interface{}) *MockRuntimeConfig_DialAPIServer_Call {
	return &MockRuntimeConfig_DialAPIServer_Call{Call: _e.mock.On("DialAPIServer", context1)}
}

func (_c *MockRuntimeConfig_DialAPIServer_Call) Run(run func(context1 context.Context)) *MockRuntimeConfig_DialAPIServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRuntimeConfig_DialAPIServer_Call) Return(clientConn *grpc.ClientConn, err error) *MockRuntimeConfig_DialAPIServer_Call {
	_c.Call.Return(clientConn, err)
	return _c
}

func (_c *MockRuntimeConfig_DialAPIServer_Call) RunAndReturn(run func(context1 context.Context) (*grpc.ClientConn, error)) *MockRuntimeConfig_DialAPIServer_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureEnrolled provides a mock function for the type MockRuntimeConfig
func (_mock *MockRuntimeConfig) EnsureEnrolled(context1 context.Context, s string) error {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for EnsureEnrolled")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(context1, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRuntimeConfig_EnsureEnrolled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureEnrolled'
type MockRuntimeConfig_EnsureEnrolled_Call struct {
	*mock.Call
}

// EnsureEnrolled is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockRuntimeConfig_Expecter) EnsureEnrolled(context1 interface{}, s interface{}) *MockRuntimeConfig_EnsureEnrolled_Call {
	return &MockRuntimeConfig_EnsureEnrolled_Call{Call: _e.mock.On("EnsureEnrolled", context1, s)}
}

func (_c *MockRuntimeConfig_EnsureEnrolled_Call) Run(run func(context1 context.Context, s string)) *MockRuntimeConfig_EnsureEnrolled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRuntimeConfig_EnsureEnrolled_Call) Return(err error) *MockRuntimeConfig_EnsureEnrolled_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRuntimeConfig_EnsureEnrolled_Call) RunAndReturn(run func(context1 context.Context, s string) error) *MockRuntimeConfig_EnsureEnrolled_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveTenant provides a mock function for the type MockRuntimeConfig
func (_mock *MockRuntimeConfig) GetActiveTenant() *pb.Tenant {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActiveTenant")
	}

	var r0 *pb.Tenant
	if returnFunc, ok := ret.Get(0).(func() *pb.Tenant); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Tenant)
		}
	}
	return r0
}

// MockRuntimeConfig_GetActiveTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveTenant'
type MockRuntimeConfig_GetActiveTenant_Call struct {
	*mock.Call
}

// GetActiveTenant is a helper method to define mock.On call
func (_e *MockRuntimeConfig_Expecter) GetActiveTenant() *MockRuntimeConfig_GetActiveTenant_Call {
	return &MockRuntimeConfig_GetActiveTenant_Call{Call: _e.mock.On("GetActiveTenant")}
}

func (_c *MockRuntimeConfig_GetActiveTenant_Call) Run(run func()) *MockRuntimeConfig_GetActiveTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRuntimeConfig_GetActiveTenant_Call) Return(tenant *pb.Tenant) *MockRuntimeConfig_GetActiveTenant_Call {
	_c.Call.Return(tenant)
	return _c
}

func (_c *MockRuntimeConfig_GetActiveTenant_Call) RunAndReturn(run func() *pb.Tenant) *MockRuntimeConfig_GetActiveTenant_Call {
	_c.Call.Return(run)
	return _c
}

// GetDomainFromToken provides a mock function for the type MockRuntimeConfig
func (_mock *MockRuntimeConfig) GetDomainFromToken() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDomainFromToken")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockRuntimeConfig_GetDomainFromToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDomainFromToken'
type MockRuntimeConfig_GetDomainFromToken_Call struct {
	*mock.Call
}

// GetDomainFromToken is a helper method to define mock.On call
func (_e *MockRuntimeConfig_Expecter) GetDomainFromToken() *MockRuntimeConfig_GetDomainFromToken_Call {
	return &MockRuntimeConfig_GetDomainFromToken_Call{Call: _e.mock.On("GetDomainFromToken")}
}

func (_c *MockRuntimeConfig_GetDomainFromToken_Call) Run(run func()) *MockRuntimeConfig_GetDomainFromToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRuntimeConfig_GetDomainFromToken_Call) Return(s string) *MockRuntimeConfig_GetDomainFromToken_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockRuntimeConfig_GetDomainFromToken_Call) RunAndReturn(run func() string) *MockRuntimeConfig_GetDomainFromToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetTenantSession provides a mock function for the type MockRuntimeConfig
func (_mock *MockRuntimeConfig) GetTenantSession() (*pb.Session, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTenantSession")
	}

	var r0 *pb.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*pb.Session, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *pb.Session); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeConfig_GetTenantSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantSession'
type MockRuntimeConfig_GetTenantSession_Call struct {
	*mock.Call
}

// GetTenantSession is a helper method to define mock.On call
func (_e *MockRuntimeConfig_Expecter) GetTenantSession() *MockRuntimeConfig_GetTenantSession_Call {
	return &MockRuntimeConfig_GetTenantSession_Call{Call: _e.mock.On("GetTenantSession")}
}

func (_c *MockRuntimeConfig_GetTenantSession_Call) Run(run func()) *MockRuntimeConfig_GetTenantSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRuntimeConfig_GetTenantSession_Call) Return(session *pb.Session, err error) *MockRuntimeConfig_GetTenantSession_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockRuntimeConfig_GetTenantSession_Call) RunAndReturn(run func() (*pb.Session, error)) *MockRuntimeConfig_GetTenantSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetToken provides a mock function for the type MockRuntimeConfig
func (_mock *MockRuntimeConfig) GetToken(context1 context.Context) (string, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for GetToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeConfig_GetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetToken'
type MockRuntimeConfig_GetToken_Call struct {
	*mock.Call
}

// GetToken is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockRuntimeConfig_Expecter) GetToken(context1 interface{}) *MockRuntimeConfig_GetToken_Call {
	return &MockRuntimeConfig_GetToken_Call{Call: _e.mock.On("GetToken", context1)}
}

func (_c *MockRuntimeConfig_GetToken_Call) Run(run func(context1 context.Context)) *MockRuntimeConfig_GetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRuntimeConfig_GetToken_Call) Return(s string, err error) *MockRuntimeConfig_GetToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockRuntimeConfig_GetToken_Call) RunAndReturn(run func(context1 context.Context) (string, error)) *MockRuntimeConfig_GetToken_Call {
	_c.Call.Return(run)
	return _c
}

// LoadEnrollConfig provides a mock function for the type MockRuntimeConfig
func (_mock *MockRuntimeConfig) LoadEnrollConfig() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadEnrollConfig")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRuntimeConfig_LoadEnrollConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadEnrollConfig'
type MockRuntimeConfig_LoadEnrollConfig_Call struct {
	*mock.Call
}

// LoadEnrollConfig is a helper method to define mock.On call
func (_e *MockRuntimeConfig_Expecter) LoadEnrollConfig() *MockRuntimeConfig_LoadEnrollConfig_Call {
	return &MockRuntimeConfig_LoadEnrollConfig_Call{Call: _e.mock.On("LoadEnrollConfig")}
}

func (_c *MockRuntimeConfig_LoadEnrollConfig_Call) Run(run func()) *MockRuntimeConfig_LoadEnrollConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRuntimeConfig_LoadEnrollConfig_Call) Return(err error) *MockRuntimeConfig_LoadEnrollConfig_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRuntimeConfig_LoadEnrollConfig_Call) RunAndReturn(run func() error) *MockRuntimeConfig_LoadEnrollConfig_Call {
	_c.Call.Return(run)
	return _c
}

// PopulateTenants provides a mock function for the type MockRuntimeConfig
func (_mock *MockRuntimeConfig) PopulateTenants(context1 context.Context) error {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for PopulateTenants")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRuntimeConfig_PopulateTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PopulateTenants'
type MockRuntimeConfig_PopulateTenants_Call struct {
	*mock.Call
}

// PopulateTenants is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockRuntimeConfig_Expecter) PopulateTenants(context1 interface{}) *MockRuntimeConfig_PopulateTenants_Call {
	return &MockRuntimeConfig_PopulateTenants_Call{Call: _e.mock.On("PopulateTenants", context1)}
}

func (_c *MockRuntimeConfig_PopulateTenants_Call) Run(run func(context1 context.Context)) *MockRuntimeConfig_PopulateTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRuntimeConfig_PopulateTenants_Call) Return(err error) *MockRuntimeConfig_PopulateTenants_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRuntimeConfig_PopulateTenants_Call) RunAndReturn(run func(context1 context.Context) error) *MockRuntimeConfig_PopulateTenants_Call {
	_c.Call.Return(run)
	return _c
}

// ResetEnrollConfig provides a mock function for the type MockRuntimeConfig
func (_mock *MockRuntimeConfig) ResetEnrollConfig() {
	_mock.Called()
	return
}

// MockRuntimeConfig_ResetEnrollConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetEnrollConfig'
type MockRuntimeConfig_ResetEnrollConfig_Call struct {
	*mock.Call
}

// ResetEnrollConfig is a helper method to define mock.On call
func (_e *MockRuntimeConfig_Expecter) ResetEnrollConfig() *MockRuntimeConfig_ResetEnrollConfig_Call {
	return &MockRuntimeConfig_ResetEnrollConfig_Call{Call: _e.mock.On("ResetEnrollConfig")}
}

func (_c *MockRuntimeConfig_ResetEnrollConfig_Call) Run(run func()) *MockRuntimeConfig_ResetEnrollConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRuntimeConfig_ResetEnrollConfig_Call) Return() *MockRuntimeConfig_ResetEnrollConfig_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRuntimeConfig_ResetEnrollConfig_Call) RunAndReturn(run func()) *MockRuntimeConfig_ResetEnrollConfig_Call {
	_c.Run(run)
	return _c
}

// SaveEnrollConfig provides a mock function for the type MockRuntimeConfig
func (_mock *MockRuntimeConfig) SaveEnrollConfig() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SaveEnrollConfig")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRuntimeConfig_SaveEnrollConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveEnrollConfig'
type MockRuntimeConfig_SaveEnrollConfig_Call struct {
	*mock.Call
}

// SaveEnrollConfig is a helper method to define mock.On call
func (_e *MockRuntimeConfig_Expecter) SaveEnrollConfig() *MockRuntimeConfig_SaveEnrollConfig_Call {
	return &MockRuntimeConfig_SaveEnrollConfig_Call{Call: _e.mock.On("SaveEnrollConfig")}
}

func (_c *MockRuntimeConfig_SaveEnrollConfig_Call) Run(run func()) *MockRuntimeConfig_SaveEnrollConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRuntimeConfig_SaveEnrollConfig_Call) Return(err error) *MockRuntimeConfig_SaveEnrollConfig_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRuntimeConfig_SaveEnrollConfig_Call) RunAndReturn(run func() error) *MockRuntimeConfig_SaveEnrollConfig_Call {
	_c.Call.Return(run)
	return _c
}

// SetActiveTenant provides a mock function for the type MockRuntimeConfig
func (_mock *MockRuntimeConfig) SetActiveTenant(s string) error {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for SetActiveTenant")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRuntimeConfig_SetActiveTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetActiveTenant'
type MockRuntimeConfig_SetActiveTenant_Call struct {
	*mock.Call
}

// SetActiveTenant is a helper method to define mock.On call
//   - s string
func (_e *MockRuntimeConfig_Expecter) SetActiveTenant(s interface{}) *MockRuntimeConfig_SetActiveTenant_Call {
	return &MockRuntimeConfig_SetActiveTenant_Call{Call: _e.mock.On("SetActiveTenant", s)}
}

func (_c *MockRuntimeConfig_SetActiveTenant_Call) Run(run func(s string)) *MockRuntimeConfig_SetActiveTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRuntimeConfig_SetActiveTenant_Call) Return(err error) *MockRuntimeConfig_SetActiveTenant_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRuntimeConfig_SetActiveTenant_Call) RunAndReturn(run func(s string) error) *MockRuntimeConfig_SetActiveTenant_Call {
	_c.Call.Return(run)
	return _c
}

// SetTenantSession provides a mock function for the type MockRuntimeConfig
func (_mock *MockRuntimeConfig) SetTenantSession(session *pb.Session) error {
	ret := _mock.Called(session)

	if len(ret) == 0 {
		panic("no return value specified for SetTenantSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*pb.Session) error); ok {
		r0 = returnFunc(session)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRuntimeConfig_SetTenantSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTenantSession'
type MockRuntimeConfig_SetTenantSession_Call struct {
	*mock.Call
}

// SetTenantSession is a helper method to define mock.On call
//   - session *pb.Session
func (_e *MockRuntimeConfig_Expecter) SetTenantSession(session interface{}) *MockRuntimeConfig_SetTenantSession_Call {
	return &MockRuntimeConfig_SetTenantSession_Call{Call: _e.mock.On("SetTenantSession", session)}
}

func (_c *MockRuntimeConfig_SetTenantSession_Call) Run(run func(session *pb.Session)) *MockRuntimeConfig_SetTenantSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *pb.Session
		if args[0] != nil {
			arg0 = args[0].(*pb.Session)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRuntimeConfig_SetTenantSession_Call) Return(err error) *MockRuntimeConfig_SetTenantSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRuntimeConfig_SetTenantSession_Call) RunAndReturn(run func(session *pb.Session) error) *MockRuntimeConfig_SetTenantSession_Call {
	_c.Call.Return(run)
	return _c
}

// SetToken provides a mock function for the type MockRuntimeConfig
func (_mock *MockRuntimeConfig) SetToken(tokens *auth.Tokens) {
	_mock.Called(tokens)
	return
}

// MockRuntimeConfig_SetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetToken'
type MockRuntimeConfig_SetToken_Call struct {
	*mock.Call
}

// SetToken is a helper method to define mock.On call
//   - tokens *auth.Tokens
func (_e *MockRuntimeConfig_Expecter) SetToken(tokens interface{}) *MockRuntimeConfig_SetToken_Call {
	return &MockRuntimeConfig_SetToken_Call{Call: _e.mock.On("SetToken", tokens)}
}

func (_c *MockRuntimeConfig_SetToken_Call) Run(run func(tokens *auth.Tokens)) *MockRuntimeConfig_SetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *auth.Tokens
		if args[0] != nil {
			arg0 = args[0].(*auth.Tokens)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRuntimeConfig_SetToken_Call) Return() *MockRuntimeConfig_SetToken_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRuntimeConfig_SetToken_Call) RunAndReturn(run func(tokens *auth.Tokens)) *MockRuntimeConfig_SetToken_Call {
	_c.Run(run)
	return _c
}

// Tenants provides a mock function for the type MockRuntimeConfig
func (_mock *MockRuntimeConfig) Tenants() []*pb.Tenant {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tenants")
	}

	var r0 []*pb.Tenant
	if returnFunc, ok := ret.Get(0).(func() []*pb.Tenant); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Tenant)
		}
	}
	return r0
}

// MockRuntimeConfig_Tenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tenants'
type MockRuntimeConfig_Tenants_Call struct {
	*mock.Call
}

// Tenants is a helper method to define mock.On call
func (_e *MockRuntimeConfig_Expecter) Tenants() *MockRuntimeConfig_Tenants_Call {
	return &MockRuntimeConfig_Tenants_Call{Call: _e.mock.On("Tenants")}
}

func (_c *MockRuntimeConfig_Tenants_Call) Run(run func()) *MockRuntimeConfig_Tenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRuntimeConfig_Tenants_Call) Return(tenants []*pb.Tenant) *MockRuntimeConfig_Tenants_Call {
	_c.Call.Return(tenants)
	return _c
}

func (_c *MockRuntimeConfig_Tenants_Call) RunAndReturn(run func() []*pb.Tenant) *MockRuntimeConfig_Tenants_Call {
	_c.Call.Return(run)
	return _c
}

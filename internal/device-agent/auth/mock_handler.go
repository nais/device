// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth

import (
	"context"

	"github.com/sirupsen/logrus"
	mock "github.com/stretchr/testify/mock"
	"golang.org/x/oauth2"
)

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// GetDeviceAgentToken provides a mock function for the type MockHandler
func (_mock *MockHandler) GetDeviceAgentToken(ctx context.Context, log logrus.FieldLogger, oauthConfig oauth2.Config) (*Tokens, error) {
	ret := _mock.Called(ctx, log, oauthConfig)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceAgentToken")
	}

	var r0 *Tokens
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, logrus.FieldLogger, oauth2.Config) (*Tokens, error)); ok {
		return returnFunc(ctx, log, oauthConfig)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, logrus.FieldLogger, oauth2.Config) *Tokens); ok {
		r0 = returnFunc(ctx, log, oauthConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Tokens)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, logrus.FieldLogger, oauth2.Config) error); ok {
		r1 = returnFunc(ctx, log, oauthConfig)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHandler_GetDeviceAgentToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceAgentToken'
type MockHandler_GetDeviceAgentToken_Call struct {
	*mock.Call
}

// GetDeviceAgentToken is a helper method to define mock.On call
//   - ctx context.Context
//   - log logrus.FieldLogger
//   - oauthConfig oauth2.Config
func (_e *MockHandler_Expecter) GetDeviceAgentToken(ctx interface{}, log interface{}, oauthConfig interface{}) *MockHandler_GetDeviceAgentToken_Call {
	return &MockHandler_GetDeviceAgentToken_Call{Call: _e.mock.On("GetDeviceAgentToken", ctx, log, oauthConfig)}
}

func (_c *MockHandler_GetDeviceAgentToken_Call) Run(run func(ctx context.Context, log logrus.FieldLogger, oauthConfig oauth2.Config)) *MockHandler_GetDeviceAgentToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 logrus.FieldLogger
		if args[1] != nil {
			arg1 = args[1].(logrus.FieldLogger)
		}
		var arg2 oauth2.Config
		if args[2] != nil {
			arg2 = args[2].(oauth2.Config)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockHandler_GetDeviceAgentToken_Call) Return(tokens *Tokens, err error) *MockHandler_GetDeviceAgentToken_Call {
	_c.Call.Return(tokens, err)
	return _c
}

func (_c *MockHandler_GetDeviceAgentToken_Call) RunAndReturn(run func(ctx context.Context, log logrus.FieldLogger, oauthConfig oauth2.Config) (*Tokens, error)) *MockHandler_GetDeviceAgentToken_Call {
	_c.Call.Return(run)
	return _c
}

// Code generated by mockery. DO NOT EDIT.

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockDeviceHelperClient is an autogenerated mock type for the DeviceHelperClient type
type MockDeviceHelperClient struct {
	mock.Mock
}

type MockDeviceHelperClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeviceHelperClient) EXPECT() *MockDeviceHelperClient_Expecter {
	return &MockDeviceHelperClient_Expecter{mock: &_m.Mock}
}

// Configure provides a mock function with given fields: ctx, in, opts
func (_m *MockDeviceHelperClient) Configure(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ConfigureResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Configuration, ...grpc.CallOption) (*ConfigureResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Configuration, ...grpc.CallOption) *ConfigureResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ConfigureResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Configuration, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceHelperClient_Configure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Configure'
type MockDeviceHelperClient_Configure_Call struct {
	*mock.Call
}

// Configure is a helper method to define mock.On call
//   - ctx context.Context
//   - in *Configuration
//   - opts ...grpc.CallOption
func (_e *MockDeviceHelperClient_Expecter) Configure(ctx interface{}, in interface{}, opts ...interface{}) *MockDeviceHelperClient_Configure_Call {
	return &MockDeviceHelperClient_Configure_Call{Call: _e.mock.On("Configure",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDeviceHelperClient_Configure_Call) Run(run func(ctx context.Context, in *Configuration, opts ...grpc.CallOption)) *MockDeviceHelperClient_Configure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*Configuration), variadicArgs...)
	})
	return _c
}

func (_c *MockDeviceHelperClient_Configure_Call) Return(_a0 *ConfigureResponse, _a1 error) *MockDeviceHelperClient_Configure_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceHelperClient_Configure_Call) RunAndReturn(run func(context.Context, *Configuration, ...grpc.CallOption) (*ConfigureResponse, error)) *MockDeviceHelperClient_Configure_Call {
	_c.Call.Return(run)
	return _c
}

// GetSerial provides a mock function with given fields: ctx, in, opts
func (_m *MockDeviceHelperClient) GetSerial(ctx context.Context, in *GetSerialRequest, opts ...grpc.CallOption) (*GetSerialResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetSerialResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetSerialRequest, ...grpc.CallOption) (*GetSerialResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetSerialRequest, ...grpc.CallOption) *GetSerialResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetSerialResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetSerialRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceHelperClient_GetSerial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSerial'
type MockDeviceHelperClient_GetSerial_Call struct {
	*mock.Call
}

// GetSerial is a helper method to define mock.On call
//   - ctx context.Context
//   - in *GetSerialRequest
//   - opts ...grpc.CallOption
func (_e *MockDeviceHelperClient_Expecter) GetSerial(ctx interface{}, in interface{}, opts ...interface{}) *MockDeviceHelperClient_GetSerial_Call {
	return &MockDeviceHelperClient_GetSerial_Call{Call: _e.mock.On("GetSerial",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDeviceHelperClient_GetSerial_Call) Run(run func(ctx context.Context, in *GetSerialRequest, opts ...grpc.CallOption)) *MockDeviceHelperClient_GetSerial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetSerialRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockDeviceHelperClient_GetSerial_Call) Return(_a0 *GetSerialResponse, _a1 error) *MockDeviceHelperClient_GetSerial_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceHelperClient_GetSerial_Call) RunAndReturn(run func(context.Context, *GetSerialRequest, ...grpc.CallOption) (*GetSerialResponse, error)) *MockDeviceHelperClient_GetSerial_Call {
	_c.Call.Return(run)
	return _c
}

// Teardown provides a mock function with given fields: ctx, in, opts
func (_m *MockDeviceHelperClient) Teardown(ctx context.Context, in *TeardownRequest, opts ...grpc.CallOption) (*TeardownResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *TeardownResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *TeardownRequest, ...grpc.CallOption) (*TeardownResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *TeardownRequest, ...grpc.CallOption) *TeardownResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TeardownResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *TeardownRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceHelperClient_Teardown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Teardown'
type MockDeviceHelperClient_Teardown_Call struct {
	*mock.Call
}

// Teardown is a helper method to define mock.On call
//   - ctx context.Context
//   - in *TeardownRequest
//   - opts ...grpc.CallOption
func (_e *MockDeviceHelperClient_Expecter) Teardown(ctx interface{}, in interface{}, opts ...interface{}) *MockDeviceHelperClient_Teardown_Call {
	return &MockDeviceHelperClient_Teardown_Call{Call: _e.mock.On("Teardown",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDeviceHelperClient_Teardown_Call) Run(run func(ctx context.Context, in *TeardownRequest, opts ...grpc.CallOption)) *MockDeviceHelperClient_Teardown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*TeardownRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockDeviceHelperClient_Teardown_Call) Return(_a0 *TeardownResponse, _a1 error) *MockDeviceHelperClient_Teardown_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceHelperClient_Teardown_Call) RunAndReturn(run func(context.Context, *TeardownRequest, ...grpc.CallOption) (*TeardownResponse, error)) *MockDeviceHelperClient_Teardown_Call {
	_c.Call.Return(run)
	return _c
}

// Upgrade provides a mock function with given fields: ctx, in, opts
func (_m *MockDeviceHelperClient) Upgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*UpgradeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *UpgradeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *UpgradeRequest, ...grpc.CallOption) (*UpgradeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *UpgradeRequest, ...grpc.CallOption) *UpgradeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpgradeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *UpgradeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceHelperClient_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type MockDeviceHelperClient_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - ctx context.Context
//   - in *UpgradeRequest
//   - opts ...grpc.CallOption
func (_e *MockDeviceHelperClient_Expecter) Upgrade(ctx interface{}, in interface{}, opts ...interface{}) *MockDeviceHelperClient_Upgrade_Call {
	return &MockDeviceHelperClient_Upgrade_Call{Call: _e.mock.On("Upgrade",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDeviceHelperClient_Upgrade_Call) Run(run func(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption)) *MockDeviceHelperClient_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*UpgradeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockDeviceHelperClient_Upgrade_Call) Return(_a0 *UpgradeResponse, _a1 error) *MockDeviceHelperClient_Upgrade_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceHelperClient_Upgrade_Call) RunAndReturn(run func(context.Context, *UpgradeRequest, ...grpc.CallOption) (*UpgradeResponse, error)) *MockDeviceHelperClient_Upgrade_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDeviceHelperClient creates a new instance of MockDeviceHelperClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeviceHelperClient(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockDeviceHelperClient {
	mock := &MockDeviceHelperClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

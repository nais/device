// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package helper

import (
	"context"

	"github.com/nais/device/pkg/pb"
	mock "github.com/stretchr/testify/mock"
)

// NewMockOSConfigurator creates a new instance of MockOSConfigurator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOSConfigurator(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockOSConfigurator {
	mock := &MockOSConfigurator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOSConfigurator is an autogenerated mock type for the OSConfigurator type
type MockOSConfigurator struct {
	mock.Mock
}

type MockOSConfigurator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOSConfigurator) EXPECT() *MockOSConfigurator_Expecter {
	return &MockOSConfigurator_Expecter{mock: &_m.Mock}
}

// Prerequisites provides a mock function for the type MockOSConfigurator
func (_mock *MockOSConfigurator) Prerequisites() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Prerequisites")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOSConfigurator_Prerequisites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prerequisites'
type MockOSConfigurator_Prerequisites_Call struct {
	*mock.Call
}

// Prerequisites is a helper method to define mock.On call
func (_e *MockOSConfigurator_Expecter) Prerequisites() *MockOSConfigurator_Prerequisites_Call {
	return &MockOSConfigurator_Prerequisites_Call{Call: _e.mock.On("Prerequisites")}
}

func (_c *MockOSConfigurator_Prerequisites_Call) Run(run func()) *MockOSConfigurator_Prerequisites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOSConfigurator_Prerequisites_Call) Return(err error) *MockOSConfigurator_Prerequisites_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOSConfigurator_Prerequisites_Call) RunAndReturn(run func() error) *MockOSConfigurator_Prerequisites_Call {
	_c.Call.Return(run)
	return _c
}

// SetupInterface provides a mock function for the type MockOSConfigurator
func (_mock *MockOSConfigurator) SetupInterface(ctx context.Context, cfg *pb.Configuration) error {
	ret := _mock.Called(ctx, cfg)

	if len(ret) == 0 {
		panic("no return value specified for SetupInterface")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pb.Configuration) error); ok {
		r0 = returnFunc(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOSConfigurator_SetupInterface_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupInterface'
type MockOSConfigurator_SetupInterface_Call struct {
	*mock.Call
}

// SetupInterface is a helper method to define mock.On call
//   - ctx context.Context
//   - cfg *pb.Configuration
func (_e *MockOSConfigurator_Expecter) SetupInterface(ctx interface{}, cfg interface{}) *MockOSConfigurator_SetupInterface_Call {
	return &MockOSConfigurator_SetupInterface_Call{Call: _e.mock.On("SetupInterface", ctx, cfg)}
}

func (_c *MockOSConfigurator_SetupInterface_Call) Run(run func(ctx context.Context, cfg *pb.Configuration)) *MockOSConfigurator_SetupInterface_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pb.Configuration
		if args[1] != nil {
			arg1 = args[1].(*pb.Configuration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOSConfigurator_SetupInterface_Call) Return(err error) *MockOSConfigurator_SetupInterface_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOSConfigurator_SetupInterface_Call) RunAndReturn(run func(ctx context.Context, cfg *pb.Configuration) error) *MockOSConfigurator_SetupInterface_Call {
	_c.Call.Return(run)
	return _c
}

// SetupRoutes provides a mock function for the type MockOSConfigurator
func (_mock *MockOSConfigurator) SetupRoutes(ctx context.Context, gateways []*pb.Gateway) (int, error) {
	ret := _mock.Called(ctx, gateways)

	if len(ret) == 0 {
		panic("no return value specified for SetupRoutes")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*pb.Gateway) (int, error)); ok {
		return returnFunc(ctx, gateways)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*pb.Gateway) int); ok {
		r0 = returnFunc(ctx, gateways)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*pb.Gateway) error); ok {
		r1 = returnFunc(ctx, gateways)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOSConfigurator_SetupRoutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupRoutes'
type MockOSConfigurator_SetupRoutes_Call struct {
	*mock.Call
}

// SetupRoutes is a helper method to define mock.On call
//   - ctx context.Context
//   - gateways []*pb.Gateway
func (_e *MockOSConfigurator_Expecter) SetupRoutes(ctx interface{}, gateways interface{}) *MockOSConfigurator_SetupRoutes_Call {
	return &MockOSConfigurator_SetupRoutes_Call{Call: _e.mock.On("SetupRoutes", ctx, gateways)}
}

func (_c *MockOSConfigurator_SetupRoutes_Call) Run(run func(ctx context.Context, gateways []*pb.Gateway)) *MockOSConfigurator_SetupRoutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*pb.Gateway
		if args[1] != nil {
			arg1 = args[1].([]*pb.Gateway)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOSConfigurator_SetupRoutes_Call) Return(routesAdded int, err error) *MockOSConfigurator_SetupRoutes_Call {
	_c.Call.Return(routesAdded, err)
	return _c
}

func (_c *MockOSConfigurator_SetupRoutes_Call) RunAndReturn(run func(ctx context.Context, gateways []*pb.Gateway) (int, error)) *MockOSConfigurator_SetupRoutes_Call {
	_c.Call.Return(run)
	return _c
}

// SyncConf provides a mock function for the type MockOSConfigurator
func (_mock *MockOSConfigurator) SyncConf(ctx context.Context, cfg *pb.Configuration) error {
	ret := _mock.Called(ctx, cfg)

	if len(ret) == 0 {
		panic("no return value specified for SyncConf")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pb.Configuration) error); ok {
		r0 = returnFunc(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOSConfigurator_SyncConf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncConf'
type MockOSConfigurator_SyncConf_Call struct {
	*mock.Call
}

// SyncConf is a helper method to define mock.On call
//   - ctx context.Context
//   - cfg *pb.Configuration
func (_e *MockOSConfigurator_Expecter) SyncConf(ctx interface{}, cfg interface{}) *MockOSConfigurator_SyncConf_Call {
	return &MockOSConfigurator_SyncConf_Call{Call: _e.mock.On("SyncConf", ctx, cfg)}
}

func (_c *MockOSConfigurator_SyncConf_Call) Run(run func(ctx context.Context, cfg *pb.Configuration)) *MockOSConfigurator_SyncConf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pb.Configuration
		if args[1] != nil {
			arg1 = args[1].(*pb.Configuration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOSConfigurator_SyncConf_Call) Return(err error) *MockOSConfigurator_SyncConf_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOSConfigurator_SyncConf_Call) RunAndReturn(run func(ctx context.Context, cfg *pb.Configuration) error) *MockOSConfigurator_SyncConf_Call {
	_c.Call.Return(run)
	return _c
}

// TeardownInterface provides a mock function for the type MockOSConfigurator
func (_mock *MockOSConfigurator) TeardownInterface(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TeardownInterface")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOSConfigurator_TeardownInterface_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TeardownInterface'
type MockOSConfigurator_TeardownInterface_Call struct {
	*mock.Call
}

// TeardownInterface is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOSConfigurator_Expecter) TeardownInterface(ctx interface{}) *MockOSConfigurator_TeardownInterface_Call {
	return &MockOSConfigurator_TeardownInterface_Call{Call: _e.mock.On("TeardownInterface", ctx)}
}

func (_c *MockOSConfigurator_TeardownInterface_Call) Run(run func(ctx context.Context)) *MockOSConfigurator_TeardownInterface_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOSConfigurator_TeardownInterface_Call) Return(err error) *MockOSConfigurator_TeardownInterface_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOSConfigurator_TeardownInterface_Call) RunAndReturn(run func(ctx context.Context) error) *MockOSConfigurator_TeardownInterface_Call {
	_c.Call.Return(run)
	return _c
}

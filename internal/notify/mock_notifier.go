// Code generated by mockery. DO NOT EDIT.

package notify

import (
	logrus "github.com/sirupsen/logrus"
	mock "github.com/stretchr/testify/mock"
)

// MockNotifier is an autogenerated mock type for the Notifier type
type MockNotifier struct {
	mock.Mock
}

type MockNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotifier) EXPECT() *MockNotifier_Expecter {
	return &MockNotifier_Expecter{mock: &_m.Mock}
}

// Errorf provides a mock function with given fields: format, args
func (_m *MockNotifier) Errorf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockNotifier_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type MockNotifier_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockNotifier_Expecter) Errorf(format interface{}, args ...interface{}) *MockNotifier_Errorf_Call {
	return &MockNotifier_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockNotifier_Errorf_Call) Run(run func(format string, args ...interface{})) *MockNotifier_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockNotifier_Errorf_Call) Return() *MockNotifier_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNotifier_Errorf_Call) RunAndReturn(run func(string, ...interface{})) *MockNotifier_Errorf_Call {
	_c.Run(run)
	return _c
}

// Infof provides a mock function with given fields: format, args
func (_m *MockNotifier) Infof(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockNotifier_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type MockNotifier_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockNotifier_Expecter) Infof(format interface{}, args ...interface{}) *MockNotifier_Infof_Call {
	return &MockNotifier_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockNotifier_Infof_Call) Run(run func(format string, args ...interface{})) *MockNotifier_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockNotifier_Infof_Call) Return() *MockNotifier_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNotifier_Infof_Call) RunAndReturn(run func(string, ...interface{})) *MockNotifier_Infof_Call {
	_c.Run(run)
	return _c
}

// SetLogger provides a mock function with given fields: log
func (_m *MockNotifier) SetLogger(log logrus.FieldLogger) {
	_m.Called(log)
}

// MockNotifier_SetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogger'
type MockNotifier_SetLogger_Call struct {
	*mock.Call
}

// SetLogger is a helper method to define mock.On call
//   - log logrus.FieldLogger
func (_e *MockNotifier_Expecter) SetLogger(log interface{}) *MockNotifier_SetLogger_Call {
	return &MockNotifier_SetLogger_Call{Call: _e.mock.On("SetLogger", log)}
}

func (_c *MockNotifier_SetLogger_Call) Run(run func(log logrus.FieldLogger)) *MockNotifier_SetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logrus.FieldLogger))
	})
	return _c
}

func (_c *MockNotifier_SetLogger_Call) Return() *MockNotifier_SetLogger_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNotifier_SetLogger_Call) RunAndReturn(run func(logrus.FieldLogger)) *MockNotifier_SetLogger_Call {
	_c.Run(run)
	return _c
}

// NewMockNotifier creates a new instance of MockNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotifier(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockNotifier {
	mock := &MockNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

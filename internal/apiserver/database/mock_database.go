// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package database

import (
	"context"
	"time"

	"github.com/nais/device/internal/apiserver/kolide"
	"github.com/nais/device/internal/apiserver/sqlc"
	"github.com/nais/device/pkg/pb"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

type MockDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabase) EXPECT() *MockDatabase_Expecter {
	return &MockDatabase_Expecter{mock: &_m.Mock}
}

// AddDevice provides a mock function for the type MockDatabase
func (_mock *MockDatabase) AddDevice(ctx context.Context, device *pb.Device) error {
	ret := _mock.Called(ctx, device)

	if len(ret) == 0 {
		panic("no return value specified for AddDevice")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pb.Device) error); ok {
		r0 = returnFunc(ctx, device)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDatabase_AddDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDevice'
type MockDatabase_AddDevice_Call struct {
	*mock.Call
}

// AddDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - device *pb.Device
func (_e *MockDatabase_Expecter) AddDevice(ctx interface{}, device interface{}) *MockDatabase_AddDevice_Call {
	return &MockDatabase_AddDevice_Call{Call: _e.mock.On("AddDevice", ctx, device)}
}

func (_c *MockDatabase_AddDevice_Call) Run(run func(ctx context.Context, device *pb.Device)) *MockDatabase_AddDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pb.Device
		if args[1] != nil {
			arg1 = args[1].(*pb.Device)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabase_AddDevice_Call) Return(err error) *MockDatabase_AddDevice_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDatabase_AddDevice_Call) RunAndReturn(run func(ctx context.Context, device *pb.Device) error) *MockDatabase_AddDevice_Call {
	_c.Call.Return(run)
	return _c
}

// AddGateway provides a mock function for the type MockDatabase
func (_mock *MockDatabase) AddGateway(ctx context.Context, gateway *pb.Gateway) error {
	ret := _mock.Called(ctx, gateway)

	if len(ret) == 0 {
		panic("no return value specified for AddGateway")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pb.Gateway) error); ok {
		r0 = returnFunc(ctx, gateway)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDatabase_AddGateway_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGateway'
type MockDatabase_AddGateway_Call struct {
	*mock.Call
}

// AddGateway is a helper method to define mock.On call
//   - ctx context.Context
//   - gateway *pb.Gateway
func (_e *MockDatabase_Expecter) AddGateway(ctx interface{}, gateway interface{}) *MockDatabase_AddGateway_Call {
	return &MockDatabase_AddGateway_Call{Call: _e.mock.On("AddGateway", ctx, gateway)}
}

func (_c *MockDatabase_AddGateway_Call) Run(run func(ctx context.Context, gateway *pb.Gateway)) *MockDatabase_AddGateway_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pb.Gateway
		if args[1] != nil {
			arg1 = args[1].(*pb.Gateway)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabase_AddGateway_Call) Return(err error) *MockDatabase_AddGateway_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDatabase_AddGateway_Call) RunAndReturn(run func(ctx context.Context, gateway *pb.Gateway) error) *MockDatabase_AddGateway_Call {
	_c.Call.Return(run)
	return _c
}

// AddSessionInfo provides a mock function for the type MockDatabase
func (_mock *MockDatabase) AddSessionInfo(ctx context.Context, si *pb.Session) error {
	ret := _mock.Called(ctx, si)

	if len(ret) == 0 {
		panic("no return value specified for AddSessionInfo")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pb.Session) error); ok {
		r0 = returnFunc(ctx, si)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDatabase_AddSessionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSessionInfo'
type MockDatabase_AddSessionInfo_Call struct {
	*mock.Call
}

// AddSessionInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - si *pb.Session
func (_e *MockDatabase_Expecter) AddSessionInfo(ctx interface{}, si interface{}) *MockDatabase_AddSessionInfo_Call {
	return &MockDatabase_AddSessionInfo_Call{Call: _e.mock.On("AddSessionInfo", ctx, si)}
}

func (_c *MockDatabase_AddSessionInfo_Call) Run(run func(ctx context.Context, si *pb.Session)) *MockDatabase_AddSessionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pb.Session
		if args[1] != nil {
			arg1 = args[1].(*pb.Session)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabase_AddSessionInfo_Call) Return(err error) *MockDatabase_AddSessionInfo_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDatabase_AddSessionInfo_Call) RunAndReturn(run func(ctx context.Context, si *pb.Session) error) *MockDatabase_AddSessionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Approve provides a mock function for the type MockDatabase
func (_mock *MockDatabase) Approve(ctx context.Context, userID string) error {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Approve")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDatabase_Approve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Approve'
type MockDatabase_Approve_Call struct {
	*mock.Call
}

// Approve is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockDatabase_Expecter) Approve(ctx interface{}, userID interface{}) *MockDatabase_Approve_Call {
	return &MockDatabase_Approve_Call{Call: _e.mock.On("Approve", ctx, userID)}
}

func (_c *MockDatabase_Approve_Call) Run(run func(ctx context.Context, userID string)) *MockDatabase_Approve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabase_Approve_Call) Return(err error) *MockDatabase_Approve_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDatabase_Approve_Call) RunAndReturn(run func(ctx context.Context, userID string) error) *MockDatabase_Approve_Call {
	_c.Call.Return(run)
	return _c
}

// GetApproval provides a mock function for the type MockDatabase
func (_mock *MockDatabase) GetApproval(ctx context.Context, userID string) (*sqlc.Approval, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetApproval")
	}

	var r0 *sqlc.Approval
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*sqlc.Approval, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *sqlc.Approval); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlc.Approval)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabase_GetApproval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApproval'
type MockDatabase_GetApproval_Call struct {
	*mock.Call
}

// GetApproval is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockDatabase_Expecter) GetApproval(ctx interface{}, userID interface{}) *MockDatabase_GetApproval_Call {
	return &MockDatabase_GetApproval_Call{Call: _e.mock.On("GetApproval", ctx, userID)}
}

func (_c *MockDatabase_GetApproval_Call) Run(run func(ctx context.Context, userID string)) *MockDatabase_GetApproval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabase_GetApproval_Call) Return(approval *sqlc.Approval, err error) *MockDatabase_GetApproval_Call {
	_c.Call.Return(approval, err)
	return _c
}

func (_c *MockDatabase_GetApproval_Call) RunAndReturn(run func(ctx context.Context, userID string) (*sqlc.Approval, error)) *MockDatabase_GetApproval_Call {
	_c.Call.Return(run)
	return _c
}

// GetApprovals provides a mock function for the type MockDatabase
func (_mock *MockDatabase) GetApprovals(ctx context.Context) (map[string]struct{}, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetApprovals")
	}

	var r0 map[string]struct{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (map[string]struct{}, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) map[string]struct{}); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]struct{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabase_GetApprovals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApprovals'
type MockDatabase_GetApprovals_Call struct {
	*mock.Call
}

// GetApprovals is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) GetApprovals(ctx interface{}) *MockDatabase_GetApprovals_Call {
	return &MockDatabase_GetApprovals_Call{Call: _e.mock.On("GetApprovals", ctx)}
}

func (_c *MockDatabase_GetApprovals_Call) Run(run func(ctx context.Context)) *MockDatabase_GetApprovals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDatabase_GetApprovals_Call) Return(stringToVal map[string]struct{}, err error) *MockDatabase_GetApprovals_Call {
	_c.Call.Return(stringToVal, err)
	return _c
}

func (_c *MockDatabase_GetApprovals_Call) RunAndReturn(run func(ctx context.Context) (map[string]struct{}, error)) *MockDatabase_GetApprovals_Call {
	_c.Call.Return(run)
	return _c
}

// ReadDevice provides a mock function for the type MockDatabase
func (_mock *MockDatabase) ReadDevice(ctx context.Context, publicKey string) (*pb.Device, error) {
	ret := _mock.Called(ctx, publicKey)

	if len(ret) == 0 {
		panic("no return value specified for ReadDevice")
	}

	var r0 *pb.Device
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*pb.Device, error)); ok {
		return returnFunc(ctx, publicKey)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *pb.Device); ok {
		r0 = returnFunc(ctx, publicKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Device)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, publicKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabase_ReadDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDevice'
type MockDatabase_ReadDevice_Call struct {
	*mock.Call
}

// ReadDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - publicKey string
func (_e *MockDatabase_Expecter) ReadDevice(ctx interface{}, publicKey interface{}) *MockDatabase_ReadDevice_Call {
	return &MockDatabase_ReadDevice_Call{Call: _e.mock.On("ReadDevice", ctx, publicKey)}
}

func (_c *MockDatabase_ReadDevice_Call) Run(run func(ctx context.Context, publicKey string)) *MockDatabase_ReadDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabase_ReadDevice_Call) Return(device *pb.Device, err error) *MockDatabase_ReadDevice_Call {
	_c.Call.Return(device, err)
	return _c
}

func (_c *MockDatabase_ReadDevice_Call) RunAndReturn(run func(ctx context.Context, publicKey string) (*pb.Device, error)) *MockDatabase_ReadDevice_Call {
	_c.Call.Return(run)
	return _c
}

// ReadDeviceByExternalID provides a mock function for the type MockDatabase
func (_mock *MockDatabase) ReadDeviceByExternalID(ctx context.Context, externalID string) (*pb.Device, error) {
	ret := _mock.Called(ctx, externalID)

	if len(ret) == 0 {
		panic("no return value specified for ReadDeviceByExternalID")
	}

	var r0 *pb.Device
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*pb.Device, error)); ok {
		return returnFunc(ctx, externalID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *pb.Device); ok {
		r0 = returnFunc(ctx, externalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Device)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, externalID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabase_ReadDeviceByExternalID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDeviceByExternalID'
type MockDatabase_ReadDeviceByExternalID_Call struct {
	*mock.Call
}

// ReadDeviceByExternalID is a helper method to define mock.On call
//   - ctx context.Context
//   - externalID string
func (_e *MockDatabase_Expecter) ReadDeviceByExternalID(ctx interface{}, externalID interface{}) *MockDatabase_ReadDeviceByExternalID_Call {
	return &MockDatabase_ReadDeviceByExternalID_Call{Call: _e.mock.On("ReadDeviceByExternalID", ctx, externalID)}
}

func (_c *MockDatabase_ReadDeviceByExternalID_Call) Run(run func(ctx context.Context, externalID string)) *MockDatabase_ReadDeviceByExternalID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabase_ReadDeviceByExternalID_Call) Return(device *pb.Device, err error) *MockDatabase_ReadDeviceByExternalID_Call {
	_c.Call.Return(device, err)
	return _c
}

func (_c *MockDatabase_ReadDeviceByExternalID_Call) RunAndReturn(run func(ctx context.Context, externalID string) (*pb.Device, error)) *MockDatabase_ReadDeviceByExternalID_Call {
	_c.Call.Return(run)
	return _c
}

// ReadDeviceById provides a mock function for the type MockDatabase
func (_mock *MockDatabase) ReadDeviceById(ctx context.Context, deviceID int64) (*pb.Device, error) {
	ret := _mock.Called(ctx, deviceID)

	if len(ret) == 0 {
		panic("no return value specified for ReadDeviceById")
	}

	var r0 *pb.Device
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*pb.Device, error)); ok {
		return returnFunc(ctx, deviceID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *pb.Device); ok {
		r0 = returnFunc(ctx, deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Device)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, deviceID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabase_ReadDeviceById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDeviceById'
type MockDatabase_ReadDeviceById_Call struct {
	*mock.Call
}

// ReadDeviceById is a helper method to define mock.On call
//   - ctx context.Context
//   - deviceID int64
func (_e *MockDatabase_Expecter) ReadDeviceById(ctx interface{}, deviceID interface{}) *MockDatabase_ReadDeviceById_Call {
	return &MockDatabase_ReadDeviceById_Call{Call: _e.mock.On("ReadDeviceById", ctx, deviceID)}
}

func (_c *MockDatabase_ReadDeviceById_Call) Run(run func(ctx context.Context, deviceID int64)) *MockDatabase_ReadDeviceById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabase_ReadDeviceById_Call) Return(device *pb.Device, err error) *MockDatabase_ReadDeviceById_Call {
	_c.Call.Return(device, err)
	return _c
}

func (_c *MockDatabase_ReadDeviceById_Call) RunAndReturn(run func(ctx context.Context, deviceID int64) (*pb.Device, error)) *MockDatabase_ReadDeviceById_Call {
	_c.Call.Return(run)
	return _c
}

// ReadDeviceBySerialPlatform provides a mock function for the type MockDatabase
func (_mock *MockDatabase) ReadDeviceBySerialPlatform(ctx context.Context, serial string, platform string) (*pb.Device, error) {
	ret := _mock.Called(ctx, serial, platform)

	if len(ret) == 0 {
		panic("no return value specified for ReadDeviceBySerialPlatform")
	}

	var r0 *pb.Device
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*pb.Device, error)); ok {
		return returnFunc(ctx, serial, platform)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *pb.Device); ok {
		r0 = returnFunc(ctx, serial, platform)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Device)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, serial, platform)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabase_ReadDeviceBySerialPlatform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDeviceBySerialPlatform'
type MockDatabase_ReadDeviceBySerialPlatform_Call struct {
	*mock.Call
}

// ReadDeviceBySerialPlatform is a helper method to define mock.On call
//   - ctx context.Context
//   - serial string
//   - platform string
func (_e *MockDatabase_Expecter) ReadDeviceBySerialPlatform(ctx interface{}, serial interface{}, platform interface{}) *MockDatabase_ReadDeviceBySerialPlatform_Call {
	return &MockDatabase_ReadDeviceBySerialPlatform_Call{Call: _e.mock.On("ReadDeviceBySerialPlatform", ctx, serial, platform)}
}

func (_c *MockDatabase_ReadDeviceBySerialPlatform_Call) Run(run func(ctx context.Context, serial string, platform string)) *MockDatabase_ReadDeviceBySerialPlatform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDatabase_ReadDeviceBySerialPlatform_Call) Return(device *pb.Device, err error) *MockDatabase_ReadDeviceBySerialPlatform_Call {
	_c.Call.Return(device, err)
	return _c
}

func (_c *MockDatabase_ReadDeviceBySerialPlatform_Call) RunAndReturn(run func(ctx context.Context, serial string, platform string) (*pb.Device, error)) *MockDatabase_ReadDeviceBySerialPlatform_Call {
	_c.Call.Return(run)
	return _c
}

// ReadDevices provides a mock function for the type MockDatabase
func (_mock *MockDatabase) ReadDevices(ctx context.Context) ([]*pb.Device, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadDevices")
	}

	var r0 []*pb.Device
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*pb.Device, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*pb.Device); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Device)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabase_ReadDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDevices'
type MockDatabase_ReadDevices_Call struct {
	*mock.Call
}

// ReadDevices is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) ReadDevices(ctx interface{}) *MockDatabase_ReadDevices_Call {
	return &MockDatabase_ReadDevices_Call{Call: _e.mock.On("ReadDevices", ctx)}
}

func (_c *MockDatabase_ReadDevices_Call) Run(run func(ctx context.Context)) *MockDatabase_ReadDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDatabase_ReadDevices_Call) Return(devices []*pb.Device, err error) *MockDatabase_ReadDevices_Call {
	_c.Call.Return(devices, err)
	return _c
}

func (_c *MockDatabase_ReadDevices_Call) RunAndReturn(run func(ctx context.Context) ([]*pb.Device, error)) *MockDatabase_ReadDevices_Call {
	_c.Call.Return(run)
	return _c
}

// ReadGateway provides a mock function for the type MockDatabase
func (_mock *MockDatabase) ReadGateway(ctx context.Context, name string) (*pb.Gateway, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for ReadGateway")
	}

	var r0 *pb.Gateway
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*pb.Gateway, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *pb.Gateway); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Gateway)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabase_ReadGateway_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadGateway'
type MockDatabase_ReadGateway_Call struct {
	*mock.Call
}

// ReadGateway is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabase_Expecter) ReadGateway(ctx interface{}, name interface{}) *MockDatabase_ReadGateway_Call {
	return &MockDatabase_ReadGateway_Call{Call: _e.mock.On("ReadGateway", ctx, name)}
}

func (_c *MockDatabase_ReadGateway_Call) Run(run func(ctx context.Context, name string)) *MockDatabase_ReadGateway_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabase_ReadGateway_Call) Return(gateway *pb.Gateway, err error) *MockDatabase_ReadGateway_Call {
	_c.Call.Return(gateway, err)
	return _c
}

func (_c *MockDatabase_ReadGateway_Call) RunAndReturn(run func(ctx context.Context, name string) (*pb.Gateway, error)) *MockDatabase_ReadGateway_Call {
	_c.Call.Return(run)
	return _c
}

// ReadGateways provides a mock function for the type MockDatabase
func (_mock *MockDatabase) ReadGateways(ctx context.Context) ([]*pb.Gateway, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadGateways")
	}

	var r0 []*pb.Gateway
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*pb.Gateway, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*pb.Gateway); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Gateway)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabase_ReadGateways_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadGateways'
type MockDatabase_ReadGateways_Call struct {
	*mock.Call
}

// ReadGateways is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) ReadGateways(ctx interface{}) *MockDatabase_ReadGateways_Call {
	return &MockDatabase_ReadGateways_Call{Call: _e.mock.On("ReadGateways", ctx)}
}

func (_c *MockDatabase_ReadGateways_Call) Run(run func(ctx context.Context)) *MockDatabase_ReadGateways_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDatabase_ReadGateways_Call) Return(gateways []*pb.Gateway, err error) *MockDatabase_ReadGateways_Call {
	_c.Call.Return(gateways, err)
	return _c
}

func (_c *MockDatabase_ReadGateways_Call) RunAndReturn(run func(ctx context.Context) ([]*pb.Gateway, error)) *MockDatabase_ReadGateways_Call {
	_c.Call.Return(run)
	return _c
}

// ReadKolideChecks provides a mock function for the type MockDatabase
func (_mock *MockDatabase) ReadKolideChecks(ctx context.Context) (map[int64]*sqlc.KolideCheck, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadKolideChecks")
	}

	var r0 map[int64]*sqlc.KolideCheck
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (map[int64]*sqlc.KolideCheck, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) map[int64]*sqlc.KolideCheck); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int64]*sqlc.KolideCheck)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabase_ReadKolideChecks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadKolideChecks'
type MockDatabase_ReadKolideChecks_Call struct {
	*mock.Call
}

// ReadKolideChecks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) ReadKolideChecks(ctx interface{}) *MockDatabase_ReadKolideChecks_Call {
	return &MockDatabase_ReadKolideChecks_Call{Call: _e.mock.On("ReadKolideChecks", ctx)}
}

func (_c *MockDatabase_ReadKolideChecks_Call) Run(run func(ctx context.Context)) *MockDatabase_ReadKolideChecks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDatabase_ReadKolideChecks_Call) Return(int64ToKolideCheck map[int64]*sqlc.KolideCheck, err error) *MockDatabase_ReadKolideChecks_Call {
	_c.Call.Return(int64ToKolideCheck, err)
	return _c
}

func (_c *MockDatabase_ReadKolideChecks_Call) RunAndReturn(run func(ctx context.Context) (map[int64]*sqlc.KolideCheck, error)) *MockDatabase_ReadKolideChecks_Call {
	_c.Call.Return(run)
	return _c
}

// ReadMostRecentSessionInfo provides a mock function for the type MockDatabase
func (_mock *MockDatabase) ReadMostRecentSessionInfo(ctx context.Context, deviceID int64) (*pb.Session, error) {
	ret := _mock.Called(ctx, deviceID)

	if len(ret) == 0 {
		panic("no return value specified for ReadMostRecentSessionInfo")
	}

	var r0 *pb.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*pb.Session, error)); ok {
		return returnFunc(ctx, deviceID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *pb.Session); ok {
		r0 = returnFunc(ctx, deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, deviceID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabase_ReadMostRecentSessionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadMostRecentSessionInfo'
type MockDatabase_ReadMostRecentSessionInfo_Call struct {
	*mock.Call
}

// ReadMostRecentSessionInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - deviceID int64
func (_e *MockDatabase_Expecter) ReadMostRecentSessionInfo(ctx interface{}, deviceID interface{}) *MockDatabase_ReadMostRecentSessionInfo_Call {
	return &MockDatabase_ReadMostRecentSessionInfo_Call{Call: _e.mock.On("ReadMostRecentSessionInfo", ctx, deviceID)}
}

func (_c *MockDatabase_ReadMostRecentSessionInfo_Call) Run(run func(ctx context.Context, deviceID int64)) *MockDatabase_ReadMostRecentSessionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabase_ReadMostRecentSessionInfo_Call) Return(session *pb.Session, err error) *MockDatabase_ReadMostRecentSessionInfo_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockDatabase_ReadMostRecentSessionInfo_Call) RunAndReturn(run func(ctx context.Context, deviceID int64) (*pb.Session, error)) *MockDatabase_ReadMostRecentSessionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ReadPeers provides a mock function for the type MockDatabase
func (_mock *MockDatabase) ReadPeers(ctx context.Context) ([]*peer, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadPeers")
	}

	var r0 []*peer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*peer, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*peer); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*peer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabase_ReadPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadPeers'
type MockDatabase_ReadPeers_Call struct {
	*mock.Call
}

// ReadPeers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) ReadPeers(ctx interface{}) *MockDatabase_ReadPeers_Call {
	return &MockDatabase_ReadPeers_Call{Call: _e.mock.On("ReadPeers", ctx)}
}

func (_c *MockDatabase_ReadPeers_Call) Run(run func(ctx context.Context)) *MockDatabase_ReadPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDatabase_ReadPeers_Call) Return(peerMoqParams []*peer, err error) *MockDatabase_ReadPeers_Call {
	_c.Call.Return(peerMoqParams, err)
	return _c
}

func (_c *MockDatabase_ReadPeers_Call) RunAndReturn(run func(ctx context.Context) ([]*peer, error)) *MockDatabase_ReadPeers_Call {
	_c.Call.Return(run)
	return _c
}

// ReadSessionInfo provides a mock function for the type MockDatabase
func (_mock *MockDatabase) ReadSessionInfo(ctx context.Context, key string) (*pb.Session, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for ReadSessionInfo")
	}

	var r0 *pb.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*pb.Session, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *pb.Session); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabase_ReadSessionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadSessionInfo'
type MockDatabase_ReadSessionInfo_Call struct {
	*mock.Call
}

// ReadSessionInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockDatabase_Expecter) ReadSessionInfo(ctx interface{}, key interface{}) *MockDatabase_ReadSessionInfo_Call {
	return &MockDatabase_ReadSessionInfo_Call{Call: _e.mock.On("ReadSessionInfo", ctx, key)}
}

func (_c *MockDatabase_ReadSessionInfo_Call) Run(run func(ctx context.Context, key string)) *MockDatabase_ReadSessionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabase_ReadSessionInfo_Call) Return(session *pb.Session, err error) *MockDatabase_ReadSessionInfo_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockDatabase_ReadSessionInfo_Call) RunAndReturn(run func(ctx context.Context, key string) (*pb.Session, error)) *MockDatabase_ReadSessionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ReadSessionInfos provides a mock function for the type MockDatabase
func (_mock *MockDatabase) ReadSessionInfos(ctx context.Context) ([]*pb.Session, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadSessionInfos")
	}

	var r0 []*pb.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*pb.Session, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*pb.Session); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabase_ReadSessionInfos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadSessionInfos'
type MockDatabase_ReadSessionInfos_Call struct {
	*mock.Call
}

// ReadSessionInfos is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) ReadSessionInfos(ctx interface{}) *MockDatabase_ReadSessionInfos_Call {
	return &MockDatabase_ReadSessionInfos_Call{Call: _e.mock.On("ReadSessionInfos", ctx)}
}

func (_c *MockDatabase_ReadSessionInfos_Call) Run(run func(ctx context.Context)) *MockDatabase_ReadSessionInfos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDatabase_ReadSessionInfos_Call) Return(sessions []*pb.Session, err error) *MockDatabase_ReadSessionInfos_Call {
	_c.Call.Return(sessions, err)
	return _c
}

func (_c *MockDatabase_ReadSessionInfos_Call) RunAndReturn(run func(ctx context.Context) ([]*pb.Session, error)) *MockDatabase_ReadSessionInfos_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveExpiredSessions provides a mock function for the type MockDatabase
func (_mock *MockDatabase) RemoveExpiredSessions(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RemoveExpiredSessions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDatabase_RemoveExpiredSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveExpiredSessions'
type MockDatabase_RemoveExpiredSessions_Call struct {
	*mock.Call
}

// RemoveExpiredSessions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) RemoveExpiredSessions(ctx interface{}) *MockDatabase_RemoveExpiredSessions_Call {
	return &MockDatabase_RemoveExpiredSessions_Call{Call: _e.mock.On("RemoveExpiredSessions", ctx)}
}

func (_c *MockDatabase_RemoveExpiredSessions_Call) Run(run func(ctx context.Context)) *MockDatabase_RemoveExpiredSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDatabase_RemoveExpiredSessions_Call) Return(err error) *MockDatabase_RemoveExpiredSessions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDatabase_RemoveExpiredSessions_Call) RunAndReturn(run func(ctx context.Context) error) *MockDatabase_RemoveExpiredSessions_Call {
	_c.Call.Return(run)
	return _c
}

// SetDeviceSeenByKolide provides a mock function for the type MockDatabase
func (_mock *MockDatabase) SetDeviceSeenByKolide(ctx context.Context, externalID string, serial string, platform string, lastSeen *time.Time) error {
	ret := _mock.Called(ctx, externalID, serial, platform, lastSeen)

	if len(ret) == 0 {
		panic("no return value specified for SetDeviceSeenByKolide")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, *time.Time) error); ok {
		r0 = returnFunc(ctx, externalID, serial, platform, lastSeen)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDatabase_SetDeviceSeenByKolide_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDeviceSeenByKolide'
type MockDatabase_SetDeviceSeenByKolide_Call struct {
	*mock.Call
}

// SetDeviceSeenByKolide is a helper method to define mock.On call
//   - ctx context.Context
//   - externalID string
//   - serial string
//   - platform string
//   - lastSeen *time.Time
func (_e *MockDatabase_Expecter) SetDeviceSeenByKolide(ctx interface{}, externalID interface{}, serial interface{}, platform interface{}, lastSeen interface{}) *MockDatabase_SetDeviceSeenByKolide_Call {
	return &MockDatabase_SetDeviceSeenByKolide_Call{Call: _e.mock.On("SetDeviceSeenByKolide", ctx, externalID, serial, platform, lastSeen)}
}

func (_c *MockDatabase_SetDeviceSeenByKolide_Call) Run(run func(ctx context.Context, externalID string, serial string, platform string, lastSeen *time.Time)) *MockDatabase_SetDeviceSeenByKolide_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 *time.Time
		if args[4] != nil {
			arg4 = args[4].(*time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockDatabase_SetDeviceSeenByKolide_Call) Return(err error) *MockDatabase_SetDeviceSeenByKolide_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDatabase_SetDeviceSeenByKolide_Call) RunAndReturn(run func(ctx context.Context, externalID string, serial string, platform string, lastSeen *time.Time) error) *MockDatabase_SetDeviceSeenByKolide_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDevices provides a mock function for the type MockDatabase
func (_mock *MockDatabase) UpdateDevices(ctx context.Context, devices []*pb.Device) error {
	ret := _mock.Called(ctx, devices)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDevices")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*pb.Device) error); ok {
		r0 = returnFunc(ctx, devices)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDatabase_UpdateDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDevices'
type MockDatabase_UpdateDevices_Call struct {
	*mock.Call
}

// UpdateDevices is a helper method to define mock.On call
//   - ctx context.Context
//   - devices []*pb.Device
func (_e *MockDatabase_Expecter) UpdateDevices(ctx interface{}, devices interface{}) *MockDatabase_UpdateDevices_Call {
	return &MockDatabase_UpdateDevices_Call{Call: _e.mock.On("UpdateDevices", ctx, devices)}
}

func (_c *MockDatabase_UpdateDevices_Call) Run(run func(ctx context.Context, devices []*pb.Device)) *MockDatabase_UpdateDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*pb.Device
		if args[1] != nil {
			arg1 = args[1].([]*pb.Device)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabase_UpdateDevices_Call) Return(err error) *MockDatabase_UpdateDevices_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDatabase_UpdateDevices_Call) RunAndReturn(run func(ctx context.Context, devices []*pb.Device) error) *MockDatabase_UpdateDevices_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGateway provides a mock function for the type MockDatabase
func (_mock *MockDatabase) UpdateGateway(ctx context.Context, gateway *pb.Gateway) error {
	ret := _mock.Called(ctx, gateway)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGateway")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pb.Gateway) error); ok {
		r0 = returnFunc(ctx, gateway)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDatabase_UpdateGateway_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGateway'
type MockDatabase_UpdateGateway_Call struct {
	*mock.Call
}

// UpdateGateway is a helper method to define mock.On call
//   - ctx context.Context
//   - gateway *pb.Gateway
func (_e *MockDatabase_Expecter) UpdateGateway(ctx interface{}, gateway interface{}) *MockDatabase_UpdateGateway_Call {
	return &MockDatabase_UpdateGateway_Call{Call: _e.mock.On("UpdateGateway", ctx, gateway)}
}

func (_c *MockDatabase_UpdateGateway_Call) Run(run func(ctx context.Context, gateway *pb.Gateway)) *MockDatabase_UpdateGateway_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pb.Gateway
		if args[1] != nil {
			arg1 = args[1].(*pb.Gateway)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabase_UpdateGateway_Call) Return(err error) *MockDatabase_UpdateGateway_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDatabase_UpdateGateway_Call) RunAndReturn(run func(ctx context.Context, gateway *pb.Gateway) error) *MockDatabase_UpdateGateway_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGatewayDynamicFields provides a mock function for the type MockDatabase
func (_mock *MockDatabase) UpdateGatewayDynamicFields(ctx context.Context, gateway *pb.Gateway) error {
	ret := _mock.Called(ctx, gateway)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGatewayDynamicFields")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pb.Gateway) error); ok {
		r0 = returnFunc(ctx, gateway)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDatabase_UpdateGatewayDynamicFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGatewayDynamicFields'
type MockDatabase_UpdateGatewayDynamicFields_Call struct {
	*mock.Call
}

// UpdateGatewayDynamicFields is a helper method to define mock.On call
//   - ctx context.Context
//   - gateway *pb.Gateway
func (_e *MockDatabase_Expecter) UpdateGatewayDynamicFields(ctx interface{}, gateway interface{}) *MockDatabase_UpdateGatewayDynamicFields_Call {
	return &MockDatabase_UpdateGatewayDynamicFields_Call{Call: _e.mock.On("UpdateGatewayDynamicFields", ctx, gateway)}
}

func (_c *MockDatabase_UpdateGatewayDynamicFields_Call) Run(run func(ctx context.Context, gateway *pb.Gateway)) *MockDatabase_UpdateGatewayDynamicFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pb.Gateway
		if args[1] != nil {
			arg1 = args[1].(*pb.Gateway)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabase_UpdateGatewayDynamicFields_Call) Return(err error) *MockDatabase_UpdateGatewayDynamicFields_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDatabase_UpdateGatewayDynamicFields_Call) RunAndReturn(run func(ctx context.Context, gateway *pb.Gateway) error) *MockDatabase_UpdateGatewayDynamicFields_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateKolideChecks provides a mock function for the type MockDatabase
func (_mock *MockDatabase) UpdateKolideChecks(ctx context.Context, checks []*kolide.Check) error {
	ret := _mock.Called(ctx, checks)

	if len(ret) == 0 {
		panic("no return value specified for UpdateKolideChecks")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*kolide.Check) error); ok {
		r0 = returnFunc(ctx, checks)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDatabase_UpdateKolideChecks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateKolideChecks'
type MockDatabase_UpdateKolideChecks_Call struct {
	*mock.Call
}

// UpdateKolideChecks is a helper method to define mock.On call
//   - ctx context.Context
//   - checks []*kolide.Check
func (_e *MockDatabase_Expecter) UpdateKolideChecks(ctx interface{}, checks interface{}) *MockDatabase_UpdateKolideChecks_Call {
	return &MockDatabase_UpdateKolideChecks_Call{Call: _e.mock.On("UpdateKolideChecks", ctx, checks)}
}

func (_c *MockDatabase_UpdateKolideChecks_Call) Run(run func(ctx context.Context, checks []*kolide.Check)) *MockDatabase_UpdateKolideChecks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*kolide.Check
		if args[1] != nil {
			arg1 = args[1].([]*kolide.Check)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabase_UpdateKolideChecks_Call) Return(err error) *MockDatabase_UpdateKolideChecks_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDatabase_UpdateKolideChecks_Call) RunAndReturn(run func(ctx context.Context, checks []*kolide.Check) error) *MockDatabase_UpdateKolideChecks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateKolideIssues provides a mock function for the type MockDatabase
func (_mock *MockDatabase) UpdateKolideIssues(ctx context.Context, issues []*kolide.DeviceFailure) error {
	ret := _mock.Called(ctx, issues)

	if len(ret) == 0 {
		panic("no return value specified for UpdateKolideIssues")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*kolide.DeviceFailure) error); ok {
		r0 = returnFunc(ctx, issues)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDatabase_UpdateKolideIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateKolideIssues'
type MockDatabase_UpdateKolideIssues_Call struct {
	*mock.Call
}

// UpdateKolideIssues is a helper method to define mock.On call
//   - ctx context.Context
//   - issues []*kolide.DeviceFailure
func (_e *MockDatabase_Expecter) UpdateKolideIssues(ctx interface{}, issues interface{}) *MockDatabase_UpdateKolideIssues_Call {
	return &MockDatabase_UpdateKolideIssues_Call{Call: _e.mock.On("UpdateKolideIssues", ctx, issues)}
}

func (_c *MockDatabase_UpdateKolideIssues_Call) Run(run func(ctx context.Context, issues []*kolide.DeviceFailure)) *MockDatabase_UpdateKolideIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*kolide.DeviceFailure
		if args[1] != nil {
			arg1 = args[1].([]*kolide.DeviceFailure)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabase_UpdateKolideIssues_Call) Return(err error) *MockDatabase_UpdateKolideIssues_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDatabase_UpdateKolideIssues_Call) RunAndReturn(run func(ctx context.Context, issues []*kolide.DeviceFailure) error) *MockDatabase_UpdateKolideIssues_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateKolideIssuesForDevice provides a mock function for the type MockDatabase
func (_mock *MockDatabase) UpdateKolideIssuesForDevice(ctx context.Context, externalID string, issues []*kolide.DeviceFailure) error {
	ret := _mock.Called(ctx, externalID, issues)

	if len(ret) == 0 {
		panic("no return value specified for UpdateKolideIssuesForDevice")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []*kolide.DeviceFailure) error); ok {
		r0 = returnFunc(ctx, externalID, issues)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDatabase_UpdateKolideIssuesForDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateKolideIssuesForDevice'
type MockDatabase_UpdateKolideIssuesForDevice_Call struct {
	*mock.Call
}

// UpdateKolideIssuesForDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - externalID string
//   - issues []*kolide.DeviceFailure
func (_e *MockDatabase_Expecter) UpdateKolideIssuesForDevice(ctx interface{}, externalID interface{}, issues interface{}) *MockDatabase_UpdateKolideIssuesForDevice_Call {
	return &MockDatabase_UpdateKolideIssuesForDevice_Call{Call: _e.mock.On("UpdateKolideIssuesForDevice", ctx, externalID, issues)}
}

func (_c *MockDatabase_UpdateKolideIssuesForDevice_Call) Run(run func(ctx context.Context, externalID string, issues []*kolide.DeviceFailure)) *MockDatabase_UpdateKolideIssuesForDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []*kolide.DeviceFailure
		if args[2] != nil {
			arg2 = args[2].([]*kolide.DeviceFailure)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDatabase_UpdateKolideIssuesForDevice_Call) Return(err error) *MockDatabase_UpdateKolideIssuesForDevice_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDatabase_UpdateKolideIssuesForDevice_Call) RunAndReturn(run func(ctx context.Context, externalID string, issues []*kolide.DeviceFailure) error) *MockDatabase_UpdateKolideIssuesForDevice_Call {
	_c.Call.Return(run)
	return _c
}

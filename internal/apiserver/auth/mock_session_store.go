// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth

import (
	"context"

	"github.com/nais/device/pkg/pb"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSessionStore creates a new instance of MockSessionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionStore(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockSessionStore {
	mock := &MockSessionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionStore is an autogenerated mock type for the SessionStore type
type MockSessionStore struct {
	mock.Mock
}

type MockSessionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionStore) EXPECT() *MockSessionStore_Expecter {
	return &MockSessionStore_Expecter{mock: &_m.Mock}
}

// All provides a mock function for the type MockSessionStore
func (_mock *MockSessionStore) All() []*pb.Session {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*pb.Session
	if returnFunc, ok := ret.Get(0).(func() []*pb.Session); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Session)
		}
	}
	return r0
}

// MockSessionStore_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockSessionStore_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *MockSessionStore_Expecter) All() *MockSessionStore_All_Call {
	return &MockSessionStore_All_Call{Call: _e.mock.On("All")}
}

func (_c *MockSessionStore_All_Call) Run(run func()) *MockSessionStore_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionStore_All_Call) Return(sessions []*pb.Session) *MockSessionStore_All_Call {
	_c.Call.Return(sessions)
	return _c
}

func (_c *MockSessionStore_All_Call) RunAndReturn(run func() []*pb.Session) *MockSessionStore_All_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockSessionStore
func (_mock *MockSessionStore) Get(context1 context.Context, s string) (*pb.Session, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *pb.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*pb.Session, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *pb.Session); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSessionStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockSessionStore_Expecter) Get(context1 interface{}, s interface{}) *MockSessionStore_Get_Call {
	return &MockSessionStore_Get_Call{Call: _e.mock.On("Get", context1, s)}
}

func (_c *MockSessionStore_Get_Call) Run(run func(context1 context.Context, s string)) *MockSessionStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionStore_Get_Call) Return(session *pb.Session, err error) *MockSessionStore_Get_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessionStore_Get_Call) RunAndReturn(run func(context1 context.Context, s string) (*pb.Session, error)) *MockSessionStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshDevice provides a mock function for the type MockSessionStore
func (_mock *MockSessionStore) RefreshDevice(device *pb.Device) {
	_mock.Called(device)
	return
}

// MockSessionStore_RefreshDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshDevice'
type MockSessionStore_RefreshDevice_Call struct {
	*mock.Call
}

// RefreshDevice is a helper method to define mock.On call
//   - device *pb.Device
func (_e *MockSessionStore_Expecter) RefreshDevice(device interface{}) *MockSessionStore_RefreshDevice_Call {
	return &MockSessionStore_RefreshDevice_Call{Call: _e.mock.On("RefreshDevice", device)}
}

func (_c *MockSessionStore_RefreshDevice_Call) Run(run func(device *pb.Device)) *MockSessionStore_RefreshDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *pb.Device
		if args[0] != nil {
			arg0 = args[0].(*pb.Device)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSessionStore_RefreshDevice_Call) Return() *MockSessionStore_RefreshDevice_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSessionStore_RefreshDevice_Call) RunAndReturn(run func(device *pb.Device)) *MockSessionStore_RefreshDevice_Call {
	_c.Run(run)
	return _c
}

// Set provides a mock function for the type MockSessionStore
func (_mock *MockSessionStore) Set(context1 context.Context, session *pb.Session) error {
	ret := _mock.Called(context1, session)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pb.Session) error); ok {
		r0 = returnFunc(context1, session)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionStore_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockSessionStore_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - context1 context.Context
//   - session *pb.Session
func (_e *MockSessionStore_Expecter) Set(context1 interface{}, session interface{}) *MockSessionStore_Set_Call {
	return &MockSessionStore_Set_Call{Call: _e.mock.On("Set", context1, session)}
}

func (_c *MockSessionStore_Set_Call) Run(run func(context1 context.Context, session *pb.Session)) *MockSessionStore_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pb.Session
		if args[1] != nil {
			arg1 = args[1].(*pb.Session)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionStore_Set_Call) Return(err error) *MockSessionStore_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionStore_Set_Call) RunAndReturn(run func(context1 context.Context, session *pb.Session) error) *MockSessionStore_Set_Call {
	_c.Call.Return(run)
	return _c
}

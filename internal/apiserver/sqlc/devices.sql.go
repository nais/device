// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: devices.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addDevice = `-- name: AddDevice :exec
;

INSERT INTO devices (serial, username, public_key, ipv4, ipv6, healthy, platform)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7)
ON CONFLICT(serial, platform) DO
    UPDATE SET username = excluded.username, public_key = excluded.public_key, ipv6 = excluded.ipv6
`

type AddDeviceParams struct {
	Serial    string
	Username  string
	PublicKey string
	Ipv4      string
	Ipv6      string
	Healthy   bool
	Platform  string
}

func (q *Queries) AddDevice(ctx context.Context, arg AddDeviceParams) error {
	_, err := q.exec(ctx, q.addDeviceStmt, addDevice,
		arg.Serial,
		arg.Username,
		arg.PublicKey,
		arg.Ipv4,
		arg.Ipv6,
		arg.Healthy,
		arg.Platform,
	)
	return err
}

const clearDeviceIssuesExceptFor = `-- name: ClearDeviceIssuesExceptFor :exec
UPDATE devices
SET issues = NULL
WHERE id NOT IN (CAST(?1 AS INTEGER[]))
`

func (q *Queries) ClearDeviceIssuesExceptFor(ctx context.Context, unhealthyDeviceIds interface{}) error {
	_, err := q.exec(ctx, q.clearDeviceIssuesExceptForStmt, clearDeviceIssuesExceptFor, unhealthyDeviceIds)
	return err
}

const getDeviceByExternalID = `-- name: GetDeviceByExternalID :one
SELECT id, username, serial, platform, healthy, last_updated, public_key, ipv4, ipv6, last_seen, issues, external_id FROM devices WHERE external_id = ?1
`

func (q *Queries) GetDeviceByExternalID(ctx context.Context, externalID sql.NullString) (*Device, error) {
	row := q.queryRow(ctx, q.getDeviceByExternalIDStmt, getDeviceByExternalID, externalID)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Serial,
		&i.Platform,
		&i.Healthy,
		&i.LastUpdated,
		&i.PublicKey,
		&i.Ipv4,
		&i.Ipv6,
		&i.LastSeen,
		&i.Issues,
		&i.ExternalID,
	)
	return &i, err
}

const getDeviceByID = `-- name: GetDeviceByID :one
SELECT id, username, serial, platform, healthy, last_updated, public_key, ipv4, ipv6, last_seen, issues, external_id FROM devices WHERE id = ?1
`

func (q *Queries) GetDeviceByID(ctx context.Context, id int64) (*Device, error) {
	row := q.queryRow(ctx, q.getDeviceByIDStmt, getDeviceByID, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Serial,
		&i.Platform,
		&i.Healthy,
		&i.LastUpdated,
		&i.PublicKey,
		&i.Ipv4,
		&i.Ipv6,
		&i.LastSeen,
		&i.Issues,
		&i.ExternalID,
	)
	return &i, err
}

const getDeviceByPublicKey = `-- name: GetDeviceByPublicKey :one
SELECT id, username, serial, platform, healthy, last_updated, public_key, ipv4, ipv6, last_seen, issues, external_id FROM devices WHERE public_key = ?1
`

func (q *Queries) GetDeviceByPublicKey(ctx context.Context, publicKey string) (*Device, error) {
	row := q.queryRow(ctx, q.getDeviceByPublicKeyStmt, getDeviceByPublicKey, publicKey)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Serial,
		&i.Platform,
		&i.Healthy,
		&i.LastUpdated,
		&i.PublicKey,
		&i.Ipv4,
		&i.Ipv6,
		&i.LastSeen,
		&i.Issues,
		&i.ExternalID,
	)
	return &i, err
}

const getDeviceBySerialAndPlatform = `-- name: GetDeviceBySerialAndPlatform :one
SELECT id, username, serial, platform, healthy, last_updated, public_key, ipv4, ipv6, last_seen, issues, external_id from devices WHERE serial = ?1 AND platform = ?2
`

type GetDeviceBySerialAndPlatformParams struct {
	Serial   string
	Platform string
}

func (q *Queries) GetDeviceBySerialAndPlatform(ctx context.Context, arg GetDeviceBySerialAndPlatformParams) (*Device, error) {
	row := q.queryRow(ctx, q.getDeviceBySerialAndPlatformStmt, getDeviceBySerialAndPlatform, arg.Serial, arg.Platform)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Serial,
		&i.Platform,
		&i.Healthy,
		&i.LastUpdated,
		&i.PublicKey,
		&i.Ipv4,
		&i.Ipv6,
		&i.LastSeen,
		&i.Issues,
		&i.ExternalID,
	)
	return &i, err
}

const getDevices = `-- name: GetDevices :many
SELECT id, username, serial, platform, healthy, last_updated, public_key, ipv4, ipv6, last_seen, issues, external_id FROM devices ORDER BY id
`

func (q *Queries) GetDevices(ctx context.Context) ([]*Device, error) {
	rows, err := q.query(ctx, q.getDevicesStmt, getDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Serial,
			&i.Platform,
			&i.Healthy,
			&i.LastUpdated,
			&i.PublicKey,
			&i.Ipv4,
			&i.Ipv6,
			&i.LastSeen,
			&i.Issues,
			&i.ExternalID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDevice = `-- name: UpdateDevice :one
UPDATE devices
SET external_id = ?1, healthy = ?2, last_updated = ?3, last_seen = ?4, issues = ?5
WHERE serial = ?6 AND platform = ?7
RETURNING id
`

type UpdateDeviceParams struct {
	ExternalID  sql.NullString
	Healthy     bool
	LastUpdated sql.NullString
	LastSeen    sql.NullString
	Issues      sql.NullString
	Serial      string
	Platform    string
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) (int64, error) {
	row := q.queryRow(ctx, q.updateDeviceStmt, updateDevice,
		arg.ExternalID,
		arg.Healthy,
		arg.LastUpdated,
		arg.LastSeen,
		arg.Issues,
		arg.Serial,
		arg.Platform,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

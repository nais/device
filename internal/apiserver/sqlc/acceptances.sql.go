// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: acceptances.sql

package sqlc

import (
	"context"
)

const acceptAcceptableUse = `-- name: AcceptAcceptableUse :exec
INSERT INTO acceptances (user_id, accepted_at) VALUES (?1, ?2) ON CONFLICT(user_id) DO NOTHING
`

type AcceptAcceptableUseParams struct {
	UserID     string
	AcceptedAt string
}

func (q *Queries) AcceptAcceptableUse(ctx context.Context, arg AcceptAcceptableUseParams) error {
	_, err := q.exec(ctx, q.acceptAcceptableUseStmt, acceptAcceptableUse, arg.UserID, arg.AcceptedAt)
	return err
}

const getAcceptance = `-- name: GetAcceptance :one
SELECT user_id, accepted_at FROM acceptances WHERE user_id = ?1
`

func (q *Queries) GetAcceptance(ctx context.Context, userID string) (*Acceptance, error) {
	row := q.queryRow(ctx, q.getAcceptanceStmt, getAcceptance, userID)
	var i Acceptance
	err := row.Scan(&i.UserID, &i.AcceptedAt)
	return &i, err
}

const getAcceptances = `-- name: GetAcceptances :many
SELECT user_id, accepted_at FROM acceptances
`

func (q *Queries) GetAcceptances(ctx context.Context) ([]*Acceptance, error) {
	rows, err := q.query(ctx, q.getAcceptancesStmt, getAcceptances)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Acceptance
	for rows.Next() {
		var i Acceptance
		if err := rows.Scan(&i.UserID, &i.AcceptedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rejectAcceptableUse = `-- name: RejectAcceptableUse :exec
DELETE FROM acceptances WHERE user_id = ?1
`

func (q *Queries) RejectAcceptableUse(ctx context.Context, userID string) error {
	_, err := q.exec(ctx, q.rejectAcceptableUseStmt, rejectAcceptableUse, userID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: approvals.sql

package sqlc

import (
	"context"
)

const approve = `-- name: Approve :exec
INSERT INTO approvals (user_id, approved_at) VALUES (?1, DATETIME('now')) ON CONFLICT(user_id) DO NOTHING
`

func (q *Queries) Approve(ctx context.Context, userID string) error {
	_, err := q.exec(ctx, q.approveStmt, approve, userID)
	return err
}

const getApproval = `-- name: GetApproval :one
SELECT user_id, approved_at FROM approvals WHERE user_id = ?1
`

func (q *Queries) GetApproval(ctx context.Context, userID string) (*Approval, error) {
	row := q.queryRow(ctx, q.getApprovalStmt, getApproval, userID)
	var i Approval
	err := row.Scan(&i.UserID, &i.ApprovedAt)
	return &i, err
}

const getApprovals = `-- name: GetApprovals :many
SELECT user_id, approved_at FROM approvals
`

func (q *Queries) GetApprovals(ctx context.Context) ([]*Approval, error) {
	rows, err := q.query(ctx, q.getApprovalsStmt, getApprovals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Approval
	for rows.Next() {
		var i Approval
		if err := rows.Scan(&i.UserID, &i.ApprovedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeApproval = `-- name: RevokeApproval :exec
DELETE FROM approvals WHERE user_id = ?1
`

func (q *Queries) RevokeApproval(ctx context.Context, userID string) error {
	_, err := q.exec(ctx, q.revokeApprovalStmt, revokeApproval, userID)
	return err
}

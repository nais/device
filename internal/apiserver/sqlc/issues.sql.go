// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: issues.sql

package sqlc

import (
	"context"
	"database/sql"
)

const deleteKolideIssuesForDevice = `-- name: DeleteKolideIssuesForDevice :exec
DELETE FROM kolide_issues WHERE device_id = ?1
`

func (q *Queries) DeleteKolideIssuesForDevice(ctx context.Context, deviceID string) error {
	_, err := q.exec(ctx, q.deleteKolideIssuesForDeviceStmt, deleteKolideIssuesForDevice, deviceID)
	return err
}

const getKolideCheck = `-- name: GetKolideCheck :one
SELECT id, tags, display_name, description FROM kolide_checks WHERE id = ?1
`

func (q *Queries) GetKolideCheck(ctx context.Context, id int64) (*KolideCheck, error) {
	row := q.queryRow(ctx, q.getKolideCheckStmt, getKolideCheck, id)
	var i KolideCheck
	err := row.Scan(
		&i.ID,
		&i.Tags,
		&i.DisplayName,
		&i.Description,
	)
	return &i, err
}

const getKolideChecks = `-- name: GetKolideChecks :many
SELECT id, tags, display_name, description FROM kolide_checks
`

func (q *Queries) GetKolideChecks(ctx context.Context) ([]*KolideCheck, error) {
	rows, err := q.query(ctx, q.getKolideChecksStmt, getKolideChecks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*KolideCheck
	for rows.Next() {
		var i KolideCheck
		if err := rows.Scan(
			&i.ID,
			&i.Tags,
			&i.DisplayName,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKolideIssues = `-- name: GetKolideIssues :many
SELECT kolide_issues.id, kolide_issues.device_id, kolide_issues.check_id, kolide_issues.title, kolide_issues.detected_at, kolide_issues.resolved_at, kolide_issues.last_updated, kolide_issues.ignored, kolide_checks.id, kolide_checks.tags, kolide_checks.display_name, kolide_checks.description
FROM kolide_issues
JOIN kolide_checks ON kolide_checks.id = kolide_issues.check_id
`

type GetKolideIssuesRow struct {
	ID          int64
	DeviceID    string
	CheckID     int64
	Title       string
	DetectedAt  string
	ResolvedAt  sql.NullString
	LastUpdated string
	Ignored     bool
	ID_2        int64
	Tags        string
	DisplayName string
	Description string
}

func (q *Queries) GetKolideIssues(ctx context.Context) ([]*GetKolideIssuesRow, error) {
	rows, err := q.query(ctx, q.getKolideIssuesStmt, getKolideIssues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetKolideIssuesRow
	for rows.Next() {
		var i GetKolideIssuesRow
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.CheckID,
			&i.Title,
			&i.DetectedAt,
			&i.ResolvedAt,
			&i.LastUpdated,
			&i.Ignored,
			&i.ID_2,
			&i.Tags,
			&i.DisplayName,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKolideIssuesForDevice = `-- name: GetKolideIssuesForDevice :many
SELECT kolide_issues.id, kolide_issues.device_id, kolide_issues.check_id, kolide_issues.title, kolide_issues.detected_at, kolide_issues.resolved_at, kolide_issues.last_updated, kolide_issues.ignored, kolide_checks.id, kolide_checks.tags, kolide_checks.display_name, kolide_checks.description
FROM kolide_issues
JOIN kolide_checks ON kolide_checks.id = kolide_issues.check_id
WHERE kolide_issues.device_id = ?1
`

type GetKolideIssuesForDeviceRow struct {
	ID          int64
	DeviceID    string
	CheckID     int64
	Title       string
	DetectedAt  string
	ResolvedAt  sql.NullString
	LastUpdated string
	Ignored     bool
	ID_2        int64
	Tags        string
	DisplayName string
	Description string
}

func (q *Queries) GetKolideIssuesForDevice(ctx context.Context, deviceID string) ([]*GetKolideIssuesForDeviceRow, error) {
	rows, err := q.query(ctx, q.getKolideIssuesForDeviceStmt, getKolideIssuesForDevice, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetKolideIssuesForDeviceRow
	for rows.Next() {
		var i GetKolideIssuesForDeviceRow
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.CheckID,
			&i.Title,
			&i.DetectedAt,
			&i.ResolvedAt,
			&i.LastUpdated,
			&i.Ignored,
			&i.ID_2,
			&i.Tags,
			&i.DisplayName,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setKolideCheck = `-- name: SetKolideCheck :exec
INSERT INTO kolide_checks (id, tags, display_name, description)
VALUES (?1, ?2, ?3, ?4) 
	ON CONFLICT(id) DO UPDATE SET 
	tags = excluded.tags,
	display_name = excluded.display_name,
	description = excluded.description
`

type SetKolideCheckParams struct {
	ID          int64
	Tags        string
	DisplayName string
	Description string
}

func (q *Queries) SetKolideCheck(ctx context.Context, arg SetKolideCheckParams) error {
	_, err := q.exec(ctx, q.setKolideCheckStmt, setKolideCheck,
		arg.ID,
		arg.Tags,
		arg.DisplayName,
		arg.Description,
	)
	return err
}

const setKolideIssue = `-- name: SetKolideIssue :exec
INSERT INTO kolide_issues (id, device_id, check_id, title, detected_at, resolved_at, last_updated, ignored)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8)
	ON CONFLICT(id) DO UPDATE SET 
	device_id = excluded.device_id,
	check_id = excluded.check_id,
	title = excluded.title,
	detected_at = excluded.detected_at,
	resolved_at = excluded.resolved_at,
	last_updated = excluded.last_updated,
	ignored = excluded.ignored
`

type SetKolideIssueParams struct {
	ID          int64
	DeviceID    string
	CheckID     int64
	Title       string
	DetectedAt  string
	ResolvedAt  sql.NullString
	LastUpdated string
	Ignored     bool
}

func (q *Queries) SetKolideIssue(ctx context.Context, arg SetKolideIssueParams) error {
	_, err := q.exec(ctx, q.setKolideIssueStmt, setKolideIssue,
		arg.ID,
		arg.DeviceID,
		arg.CheckID,
		arg.Title,
		arg.DetectedAt,
		arg.ResolvedAt,
		arg.LastUpdated,
		arg.Ignored,
	)
	return err
}

const truncateKolideIssues = `-- name: TruncateKolideIssues :exec
DELETE FROM kolide_issues
`

func (q *Queries) TruncateKolideIssues(ctx context.Context) error {
	_, err := q.exec(ctx, q.truncateKolideIssuesStmt, truncateKolideIssues)
	return err
}

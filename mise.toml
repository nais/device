[tasks.test]
description = "Run tests"
run = "go test ./... -race"

[tasks.controlplane]
env = { GOOS = "linux", GOARCH = "amd64" , OTEL_COLLECTOR_ENDPOINT = "https://collector-internet.nav.cloud.nais.io", LDFLAGS = "-X github.com/nais/device/internal/version.Version=${VERSION:-local} -X github.com/nais/device/internal/otel.endpointURL=${OTEL_COLLECTOR_ENDPOINT}" }
run = """
  mkdir -p ./bin/controlplane
  go build -o bin/controlplane/apiserver -ldflags "-s $LDFLAGS" ./cmd/apiserver
  go build -o bin/controlplane/gateway-agent -ldflags "-s $LDFLAGS" ./cmd/gateway-agent
  go build -o bin/controlplane/prometheus-agent -ldflags "-s $LDFLAGS" ./cmd/prometheus-agent
"""

[tasks.linux-client]
description = "Build Linux client binaries"
env = { GOOS = "linux", GOARCH = "amd64" , OTEL_COLLECTOR_ENDPOINT = "https://collector-internet.nav.cloud.nais.io", LDFLAGS = "-X github.com/nais/device/internal/version.Version=${VERSION:-local} -X github.com/nais/device/internal/otel.endpointURL=${OTEL_COLLECTOR_ENDPOINT}" }
run = """
  mkdir -p ./bin/linux-client
  go build -o bin/linux-client/naisdevice-systray --tags "$GOTAGS" -ldflags "-s $LDFLAGS" ./cmd/naisdevice-systray
  go build -o bin/linux-client/naisdevice-agent --tags "$GOTAGS" -ldflags "-s $LDFLAGS" ./cmd/naisdevice-agent
  go build -o bin/linux-client/naisdevice-helper --tags "$GOTAGS" -ldflags "-s $LDFLAGS" ./cmd/naisdevice-helper
"""

[tasks.windows-client]
description = "Build Windows client binaries"
env = { GOOS = "windows", GOARCH = "amd64",OTEL_COLLECTOR_ENDPOINT = "https://collector-internet.nav.cloud.nais.io", LDFLAGS = "-X github.com/nais/device/internal/version.Version=${VERSION:-local} -X github.com/nais/device/internal/otel.endpointURL=${OTEL_COLLECTOR_ENDPOINT}" }
run = """
  mkdir -p ./bin/windows-client

  GOOS= GOARCH= go tool github.com/akavel/rsrc -arch amd64 -manifest ./packaging/windows/admin_manifest.xml -ico assets/nais-logo-blue.ico -o ./cmd/naisdevice-helper/main_windows.syso
  GOOS= GOARCH= go tool github.com/akavel/rsrc -ico assets/nais-logo-blue.ico -o ./cmd/naisdevice-agent/main_windows.syso
  go build -o bin/windows-client/naisdevice-systray.exe --tags "$GOTAGS" -ldflags "-s $LDFLAGS -H=windowsgui" ./cmd/naisdevice-systray
  go build -o bin/windows-client/naisdevice-agent.exe --tags "$GOTAGS" -ldflags "-s $LDFLAGS -H=windowsgui" ./cmd/naisdevice-agent
  go build -o bin/windows-client/naisdevice-helper.exe --tags "$GOTAGS" -ldflags "-s $LDFLAGS" ./cmd/naisdevice-helper
  ./packaging/windows/sign-exe bin/windows-client/naisdevice-systray.exe ./packaging/windows/naisdevice.crt ./packaging/windows/naisdevice.key
  ./packaging/windows/sign-exe bin/windows-client/naisdevice-agent.exe ./packaging/windows/naisdevice.crt ./packaging/windows/naisdevice.key
  ./packaging/windows/sign-exe bin/windows-client/naisdevice-helper.exe ./packaging/windows/naisdevice.crt ./packaging/windows/naisdevice.key
"""

[tasks.macos-client]
description = "Build macOS client binaries"
env = { GOOS = "darwin", GOARCH = "amd64",OTEL_COLLECTOR_ENDPOINT = "https://collector-internet.nav.cloud.nais.io", LDFLAGS = "-X github.com/nais/device/internal/version.Version=${VERSION:-local} -X github.com/nais/device/internal/otel.endpointURL=${OTEL_COLLECTOR_ENDPOINT}" }
run = """
  mkdir -p ./bin/macos-client
  go build -o bin/macos-client/naisdevice-agent --tags "$(GOTAGS)" -ldflags "-s $(LDFLAGS)" ./cmd/naisdevice-agent
  CGO_ENABLED=1 go build -o bin/macos-client/naisdevice-systray --tags "$(GOTAGS)" -ldflags "-s $(LDFLAGS)" ./cmd/naisdevice-systray
  go build -o bin/macos-client/naisdevice-helper --tags "$(GOTAGS)" -ldflags "-s $(LDFLAGS)" ./cmd/naisdevice-helper
"""

[tasks.build]
description = "Build all commands"
run = "go build ./cmd/..."

[tasks.linux-icon]
description = "Generate Linux icons"
run = """
   for size in 16x16 32x32 64x64 128x128 256x256 512x512 ; do \
     mkdir -p "packaging/linux/icons/${size}/apps/" ; \
    magick \
      -background none \
      assets/svg/blue.svg \
      -gravity center \
      -resize "$size" \
      "packaging/linux/icons/${size}/apps/naisdevice.png"
  done
"""

[tasks.windows-icon]
description = "Generate Windows icons"
run = """
  mkdir -p packaging/windows/assets/
  magick -background none assets/svg/blue.svg -resize 256x256 -gravity center -extent 256x256 -define icon:auto-resize=48,64,96,128,256 packaging/windows/assets/naisdevice.ico
"""

[tasks.macos-icon]
description = "Generate macOS icons"
run = """
  mkdir -p packaging/macos/icons/
  magick -background transparent assets/svg/blue.svg -resize 1024x1024 -gravity center -extent 1024x1024 packaging/macos/icons/naisdevice.png
u
"""

[tasks.wg]
run = """
  mkdir -p bin/macos-client
  curl -L https://git.zx2c4.com/wireguard-tools/snapshot/wireguard-tools-1.0.20250521.tar.xz | tar xJ
  cd wireguard-tools-*/src && make && cp wg ../../bin/macos-client/
  rm -rf ./wireguard-tools-*
"""

[tasks.wireguard-go]
run = """
  mkdir -p bin/macos-client
  curl -L https://git.zx2c4.com/wireguard-go/snapshot/wireguard-go-0.0.20250522.tar.xz | tar xJ
  cd wireguard-go-*/ && make && cp wireguard-go ../bin/macos-client/
  rm -rf ./wireguard-go-*
"""

[tasks.pkg]
depends = ['wg', 'wireguard-go', 'macos-icon', 'macos-client']
run = "./packaging/macos/build-pkg $VERSION $RELEASE"

[tasks.deb]
depends = ['linux-client', 'linux-icon']
run = "./packaging/linux/build-deb $VERSION"

[tasks.nsis]
depends = ['windows-client', 'windows-icon']
run = "./packaging/windows/build-nsis $VERSION"

[tasks.controlplane-debs]
run = "./packaging/controlplane/*/build-deb $VERSION"

[tasks.clean]
description = "Clean up build artifacts"
run = """
  rm -rf *.deb
  rm -rf wireguard-go-*
  rm -rf wireguard-tools-*
  rm -rf naisdevice.app
  rm -f naisdevice-*.pkg
  rm -f naisdevice-*.deb
  rm -f ./packaging/windows/naisdevice*.exe
  rm -rf ./bin
  rm -rf ./packaging/*/icons
  rm -rf ./packaging/*/assets
"""

[tasks.buildreleaseenroller]
run = """
  docker build -t europe-north1-docker.pkg.dev/nais-io/nais/images/naisdevice-enroller:${VERSION} -f cmd/enroller/Dockerfile .
  docker push europe-north1-docker.pkg.dev/nais-io/nais/images/naisdevice-enroller:${VERSION}
"""

[tasks.buildreleaseauthserver]
run = """
  cd cmd/auth-server && docker build -t europe-north1-docker.pkg.dev/nais-io/nais/images/naisdevice-auth-server:${VERSION} .
  docker push europe-north1-docker.pkg.dev/nais-io/nais/images/naisdevice-auth-server:${VERSION}
"""

[tasks.fmt]
description = "Format go files using gofumpt"
run = "go tool mvdan.cc/gofumpt -w ./"

[tasks.generate]
description = "Run all code generation tools"
depends = ["generate-guievent-strings", "mocks", "generate-sqlc"]

[tasks.generate-guievent-strings]
description = "Generate strings for the systray"
run = "go tool golang.org/x/tools/cmd/stringer -type=GuiEvent ./internal/systray"

[tasks.mocks]
description = "Generate mocks using mockery"
run = """
  go tool github.com/vektra/mockery/v3
  find internal -type f -name "mock_*.go" -exec go tool mvdan.cc/gofumpt -w {} \\;
"""

[tasks.generate-sqlc]
description = "Generate sqlc code"
run = """
  go tool github.com/sqlc-dev/sqlc/cmd/sqlc generate
  go tool mvdan.cc/gofumpt -w ./internal/apiserver/sqlc/
"""

[tasks.check]
description = "Run all static code analysis tools"
depends = ["staticcheck", "vulncheck", "vet"]

[tasks.staticcheck]
description = "Run staticcheck"
run = "go tool honnef.co/go/tools/cmd/staticcheck ./..."

[tasks.vulncheck]
description = "Run govulncheck"
run = "go tool golang.org/x/vuln/cmd/govulncheck ./..."

[tasks.vet]
description = "Run go vet"
run = "go vet ./..."

[tasks.lint]
description = "Run golangci-lint"
run = "go tool github.com/golangci/golangci-lint/cmd/golangci-lint run"

[tools]
go = "1.25.0"
protoc = "29.4"
protoc-gen-go = "1.36.6"
protoc-gen-go-grpc = "1.5.1"

[settings]
pin = true
